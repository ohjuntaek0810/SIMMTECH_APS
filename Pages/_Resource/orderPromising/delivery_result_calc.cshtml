@page
@model HS.Web.Pages.delivery_result_calc
@{
    string CLIENT = Model.Params["CLIENT"].AsString();
    string R = Model.Params["R"].AsString();
    string W = Model.Params["W"].AsString();
    string first_plan_id = Model.Params["first_plan_id"].AsString();
}

<script>
     let first_plan_id = '@first_plan_id';
   
     const defaultColumns = [
        { dataField: "BUTTON_TEXT", label: "선택",  buttonLabel : "선택", type: "button", width: 80, align:'center', editable: false, visible: true },
        { dataField: "ORDER_DATE", label: "ORDER_DATE", type:'date' ,width: 100, editable: false, },
        { dataField: "TEAM", label: "TEAM", width: 100, editable: false },       
        { dataField: "CUST_NAME", label: "Customer", width: 100, editable: false },       
        { dataField: "SHIP_TO_NAME", label: "Ship To", width: 100, editable: false,  },      
        { dataField: "MODEL_NAME", label: "Model", width: 300, editable: false,  },
        { dataField: "PO_NUMBER", label: "PO_NUMBER", width: 100, editable: false,  },      
        { dataField: "REQUEST_ORDER_ID", label: "REQUEST_ORDER_ID", width: 100, editable: false,  visible: false  },
        { dataField: "REQUEST_ORDER_DUE_SEQ", label: "REQUEST_ORDER_DUE_SEQ", width: 100, editable: false,   visible: false  },
        { dataField: "ITEM_CODE", label: "ITEM_CODE", width: 120, editable: false, },       
        { dataField: "TOTAL_QTY_PCS", label: "Total QTY (PCS)", type : 'number', align:'right' , width: 100, editable: false,  },
        { dataField: "QTY_PCS", label: "DAY QTY (PCS)", width: 100, type : 'number', align:'right' , editable: true,  },
        { dataField: "TOTAL_QTY_SQM", label: "Total QTY (SQM)", type : 'number', align:'right' ,width: 100, editable: false, },
        { dataField: "QTY_SQM", label: "DAY QTY (SQM)", type : 'number', align:'right' ,width: 100, editable: false, },
        { dataField: "PROMISING_DATE", label: "납기일", type:'date' ,width: 100, editable: true,  },
        { dataField: "LeadTime", label: "LT", width: 100, type : 'number', align:'right' , editable: false,},
        { dataField: "yield", label: "수율", width: 100, editable: false, },      
        { dataField: "REQUEST_DATE", label: "요청일", type:'date', width: 100, editable: false,  },
        { dataField: "D_DESCRIPTION", label: "Remark", width: 100, editable: false,  },
        { dataField: "BBT_CAPA", label: "BBT Capa", width: 100, editable: false,  },

        //UI미표시 
        { dataField: "DIVISION_ID", label: "DIVISION_ID", width: 100, editable: false, visible: false },
        { dataField: "REQUEST_ORDER_SORT_ORDER", label: "REQUEST_ORDER_SORT_ORDER", width: 100, editable: false, visible: false },
        { dataField: "CUST_ID", label: "CUST_ID", width: 100, editable: false, visible: false },
        { dataField: "SHIP_TO_ID", label: "SHIP_TO_ID", width: 100, editable: false, visible: false },
        { dataField: "CUST_PO_NUMBER", label: "CUST_PO_NUMBER", width: 100, editable: false, visible: false },
        { dataField: "TOTAL_SORT_ORDER", label: "TOTAL_SORT_ORDER", width: 100, editable: false, visible: false },
        { dataField: "REVISION", label: "REVISION", width: 100, editable: false, visible: false },
        { dataField: "M_DESCRIPTION", label: "M_DESCRIPTION", width: 100, editable: false, visible: false },
        { dataField: "REQUEST_ORDER_DUE_SEQ_ORDER", label: "REQUEST_ORDER_DUE_SEQ_ORDER", width: 100, editable: false, visible: false },
        { dataField: "SCHEDULE_SHIP_DATE", label: "SCHEDULE_SHIP_DATE", width: 100, editable: false, visible: false },
        { dataField: "SHIP_DATE", label: "SHIP_DATE", width: 100, editable: false, visible: false },
    ];





    $hs.handler = {
        "btn_reset" : {
            click: function() {
                // 값 초기화
                $hs.$("pnlSearch").reset();
            }
        }
        ,
        "btnSearch": {
            click: function () {

                let toServer = {};
                let pnlSearch = $hs.$("pnlSearch").val();


                if(pnlSearch["group_id"] =="" || pnlSearch["group_id"] == null)
                {
                      alert('GROUP 구분을 선택 하세요');
                      document.getElementById("group_id").focus();
                      return false;
                }

                if(pnlSearch["start_date"] =="" || pnlSearch["start_date"] == null)
                {
                      alert('날짜가 없습니다');
                      document.getElementById("start_date").focus();
                      return false;
                }

                if(pnlSearch["end_date"] =="" || pnlSearch["end_date"] == null)
                {
                      alert('날짜가 없습니다');
                      document.getElementById("end_date").focus();
                      return false;
                }

                toServer["searchterms"] = pnlSearch;

                $hs.fetch({
                    command: "search",
                    param: toServer
                }).then(fromServer => {
                    let MasterData = fromServer["MasterData"];
                    $hs.$("grid1").data(null);
                    $hs.$("grid1").data(MasterData);
                    $hs.$("grid2").data(null);
                }).catch(e => $hs.errorBox(e))
            }
        }
        ,
        //grid1======================================================================================
        "btn_excel_download1": {
            click : function() {
                $hs.util.$CommonUtil.excelDownload("grid1", "납기산출1");
            }
        }
        ,
        "grid1": {
            contextHeaderClick: function (data) {
                $hs.util.$CommonUtil.getHeaderContextClick(data);
            }
            ,
            headerFormat: function (data) {
                if (data.dataField == ""
                    || data.dataField == "QTY_PCS"
                    || data.dataField == "DESCRIPTION"
                    || data.dataField == "PROMISING_DATE"
                ) {
                    data.cell.css("color", "blue");
                }
            }
            ,
          
            cellClick: function (data) {

                if(data.dataField == "BUTTON_TEXT")
                {
                    let rowData =  data.rowData;
                    let toServer = {};
                    toServer["rowterms"] = rowData;

                    $hs.fetch({
                        command: "search_detail",
                        param: toServer
                    }).then(fromServer => {
                        let DetailData = fromServer["DetailData"];
                        $hs.$("grid2").data(DetailData);

                    }).catch(e => $hs.errorBox(e))

                }

            },

        }
        ,
        "btn_grid_add": {
            click: function () {

                let selMasterData = $hs.$("grid1").val();

                if (selMasterData.length == 0) {
                        alert("행 추가 할 데이터를 선택해 주세요.");
                        return false;
                }

                for (var D of selMasterData) {
                      $hs.$("grid1").addRow({                    
                           DIVISION_ID : D["DIVISION_ID"],
                           ORDER_DATE : D["ORDER_DATE"],
                           REQUEST_ORDER_ID : D["REQUEST_ORDER_ID"],
                           REQUEST_ORDER_SORT_ORDER : D["REQUEST_ORDER_SORT_ORDER"],
                           TEAM : D["TEAM"],
                           CUST_ID : D["CUST_ID"],
                           CUST_NAME : D["CUST_NAME"],
                           SHIP_TO_ID : D["SHIP_TO_ID"],
                           SHIP_TO_NAME :  D["SHIP_TO_NAME"],
                           ITEM_CODE : D["ITEM_CODE"],
                           MODEL_NAME : D["MODEL_NAME"],
                           REVISION : D["REVISION"],
                           TOTAL_QTY_PCS : D["TOTAL_QTY_PCS"],
                           DESCRIPTION : D["DESCRIPTION"],
                           PO_NUMBER : D["PO_NUMBER"],
                           CUST_PO_NUMBER : D["CUST_PO_NUMBER"],
                           SCHEDULE_SHIP_DATE : D["SCHEDULE_SHIP_DATE"],
                           $update : true
                      });                     
                 }


            }
        }
        ,
        "btn_grid_save": {
            click: function () {
               
                  let rowsAllData = $hs.$("grid1").data();
                  let updated_data = [];

                  //수정된 행 배열에 담기
                  for (var D of rowsAllData) {
                       if(D["$update"] === true)
                       {
                           updated_data.push(D);
                       }
                  }

                  let toServer = {};
                  let pnlSearch = $hs.$("pnlSearch").val();

                  toServer["searchterms"] = pnlSearch
                  toServer["data"] = updated_data;
                  if (updated_data.length > 0)
                  {
                       $hs.fetch({
                        command: "saveMaster",
                        param: toServer
                      }).then(fromServer => {
                        alert("저장되었습니다.");
                        $hs.$("grid1").data(fromServer["MasterData"]);

                      }).catch(e => $hs.errorBox(e))

                  }
            },
        },
        "btn_grid_delete": {
            click: function () {                 
                let toServer = {};
                toServer["searchterms"] = $hs.$("pnlSearch").val();
                let selData = $hs.$("grid1").val();

                if (selData.length == 0) {
                     alert("삭제할 항목을 체크해 주세요.");
                     return;
                }

                if(confirm("선택한 항목을 삭제 하시겠습니까?")){

                    toServer["data"] = selData;
                    $hs.fetch({
                        command: "delete",
                        param: toServer
                    }).then(fromServer => {
                        // 다시 조회
                        $hs.$("grid1").data(fromServer["MasterData"]);
                        $hs.$("grid2").data(null);
                    }).catch(e => $hs.errorBox(e))

                }

            },
         }
        ,


        //grid2========================================================================================

        "grid2": {
            headerFormat: function (data) {
                data.cell.css("text-align", "center");
            }
            ,
            cellValueChanged: function (data) {
                data.rowData["$update"] = true;
            }
            ,
            cellClick: function (data) {
            }

        }    
        ,
        "btn_excel_download2": {
            click : function() {
                $hs.util.$CommonUtil.excelDownload("grid2", "납기산출2");
            }
        }
        ,
        "PROMISING_SPLIT_QTY" : {
            change: function (data) {
                fn_PROMISING_SPLIT_QTY_CALC(data);
            }
        }  
        ,
        "btn_winopen_DAILY_CAPA_CALC": {
            click : function() {
               $hs.$("modal_DAILY_CAPA_CALC").open();            
            }
        }
        ,
        "btnSave_DAILY_CAPA_CALC": {
            click : function() {

               let toServer = {};
               let Terms = {};
               Terms["PLAN_ID"] =  $hs.$("DAILY_CAPA_PLAN_ID").val();;
               toServer["Terms"] = Terms

               $hs.fetch({
                    command: "EXEC_PR_OM_DAILY_CAPA_CALC",
                    param: toServer
               }).then(fromServer => { 
                     if(fromServer["RESULT_PARAMS"]["RTN"] =="OK")
                    {
                      alert("실행이 완료 되었습니다.");
                      $hs.$("modal_DAILY_CAPA_CALC").close();
                    }
                 
               }).catch(e => $hs.errorBox(e))
              
            }
        },
        "btn_inout_simul_calc" : {
            click :function () {
                // 오늘자 버전만 실행가능
                // const cur_data = $hs.$("grid1").data();

                // if (!cur_data || cur_data.length === 0) {
                //     alert("데이터가 없습니다.");
                //     return;
                // }

                // <input type="text" id="search_order_date" hs-df="search_order_date" class="form-datepicker form-control" data-toggle="datepicker" placeholder="">
                const orderDate = document.getElementById("search_order_date").value;
                console.log("선택한 날짜:", orderDate);

                // 첫 번째 행의 ORDER_DATE 확인
                // const orderDate = cur_data[0].ORDER_DATE; 예: "2025-09-12"

                console.log(orderDate);

                // 오늘 날짜를 YYYY-MM-DD 형식으로 변환
                const today = new Date();
                const yyyy = today.getFullYear();
                const mm = String(today.getMonth() + 1).padStart(2, '0');
                const dd = String(today.getDate()).padStart(2, '0');
                const todayStr = `${yyyy}-${mm}-${dd}`;

                console.log(todayStr);

                if (orderDate !== todayStr) {
                    alert("오늘 날짜의 데이터만 실행 가능합니다.");
                    return;
                }

                // 실행 가능할 경우 로직 계속 진행
                console.log("시뮬레이션 실행 시작");
                // ... 나머지 처리 로직
                $hs.fetch({
                    command: "PR_OM_MATERIAL_SIMUL"
               }).then(fromServer => {
                   alert("시뮬레이션 성공");
                   // console.log(fromServer["data"]);
                    // if(fromServer["data"]) {
                        // alert("시뮬레이션 성공");
                    // } else {
                        // alert("시뮬레이션 실패");
                    // }

               }).catch(e => $hs.errorBox(e))
            }
        },
    }

    $hs.load(() => {
        // 현재 localStorage에 저장된 메뉴 ID 가져옴
        var curMenuId = localStorage.getItem("curMenuId");
        // 즐겨찾기 여부 체크 후 버튼 리스너 추가
        $hs.util.$CommonUtil.checkFavorite(curMenuId);

        // 사업부
        $hs.html.select.init({
            id: "group_id",
            dataurl: "/api/data/DIVISION_LIST",
            valueMember: "CODE",
            displayMember: "NAME",
            val :"SPS"
        });

        // search
        $hs.ui.button.init({ id: "btnSearch", class: ["smart-btn", "btn-search"] });

        const now = new Date();       

        // 오늘로부터 2주 후 날짜
        // const endDate = new Date(now);
        //  endDate.setDate(endDate.getDate() + 0);

        const startDate = new Date(now.getFullYear(), now.getMonth(), 1); //이번달 10일
        const endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);  //이번달 말일
        document.getElementById('search_order_date').value = formatDate(new Date(now));

        //실제 input에 설정
        document.getElementById('start_date').value = formatDate(startDate);
        document.getElementById('end_date').value = formatDate(endDate);

        //panel
        $hs.html.panel.init({ id: "pnlSearch" });
        $hs.ui.button.init({ id: "btn_grid_add" });
        $hs.ui.button.init({ id: "btn_excel_download1"});
        $hs.ui.button.init({ id: "btn_grid_save", enabled: @W });
        $hs.ui.button.init({ id: "btn_excel_download2"});
        $hs.ui.button.init({ id: "btn_grid_delete" });     
        
        const zoomLevel = window.devicePixelRatio; // 예: 1.25, 1.5 등
        const windowHeight = window.innerHeight * zoomLevel;
        const newHeight = windowHeight - 490;

        // 마스터 그리드 초기화
        $hs.dx.grid.init({
            id: "grid1",
            width: "100%",
            height: ""+newHeight+"px",
            sortable: true,
           //selectMode: "single",
            selectMode: "multiple",
            rownumber: false,
            filterable: true,
            editable: true,
            handler: true,
            reOrdering: true, // 컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        });

        $hs.fetch({
            command: "DT_OM_BOTTLE_NECK_LIST_V",
            param:null
        }).then(fromServer => {
            const data = fromServer["OM_BOTTLE_NECK_LIST_V_RESULT"];
            data.forEach(col => {
                defaultColumns.push({
                    dataField: col.BOTTLE_NECK_NAME,
                    label: col.BOTTLE_NECK_NAME,
                    width: 120,
                    visible: true
                });
            });
            $hs.util.$CommonUtil.getGridSetting("grid1", defaultColumns);
        }).catch(e => $hs.errorBox(e))

        // 디테일 그리드 초기화
        $hs.dx.grid.init({
            id: "grid2",
            width: "100%",
            height: "250px",
            sortable: true,
            selectMode: "multiple",
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
            reOrdering: false, // 컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        })
        .columns(col => {
            col.add({ dataField: "ORDER_DATE", label: "ORDER_DATE",  width: 150, align:'center', editable: false, visible: false });
            col.add({ dataField: "MATERIAL_ITEM_CODE", label: "소요 자재", width: 150,  editable: false, visible: true });
            col.add({ dataField: "REQ_MATERIAL_QTY", label: "단위당 자재 필요 비율", width: 130,  align:'right', editable: false, visible: true });
            col.add({ dataField: "REQ_DATE", label: "REQ_DATE", width: 120,  type : 'date', editable: false, visible: true });
            col.add({ dataField: "REQ_QTY_PCS", label: "필요량(PCS)", width: 120, type : 'number',  align:'right' ,editable: false, visible: true });
            col.add({ dataField: "YIELD", label: "수율", width: 120, type : 'number',  align:'right', editable: false, visible: true });
            col.add({ dataField: "REQ_QTY_PCS_YIELD", label: "필요량 (PCS, 수율반영)", width: 150, type : 'number',  align:'right', editable: false, visible: true });
            col.add({ dataField: "REQ_QTY_PNL_YIELD", label: "필요량 (PNL, 수율반영)", width: 150, type : 'number',  align:'right', editable: false, visible: true });
            col.add({ dataField: "EVENT_DATE", label: "요구일", width: 120, type : 'date' , editable: false, visible: true });
            col.add({ dataField: "AVAILABLE_QTY_ON_SEARCH_DATE", label: "요구일 가능량", type : 'number' ,align:'right' , width: 120, editable: false, visible: true });
            col.add({ dataField: "FASTEST_SUPPLIABLE_DATE", label: "공급가능일", type : 'date' , width: 120, editable: false, visible: true });
            col.add({ dataField: "SUPPLIABLE_QTY", label: "공급가능일 가용량",  width:120,  type : 'number', align:'right', editable: false, visible: true });
        });


        const _instance = $hs.$("grid1")._instance;
        // 컬럼 라인 그리기
        _instance.option('showColumnLines', true);
        _instance.option('rowAlternationEnabled', false);
        _instance.option('showBorders', true);
        _instance.option('scrolling', {
            showScrollbar: 'always',
            useNative: true
        });

        const _instance2 = $hs.$("grid2")._instance;
         // 컬럼 라인 그리기
         _instance2.option('showColumnLines', true);
         _instance2.option('rowAlternationEnabled', false);
         _instance2.option('showBorders', true);
         _instance2.option('scrolling', {
             showScrollbar: 'always',
             useNative: true
        });

        //demension grid
        $hs.dx.grid.init({
            id: "dimension_grid",
            width: "100%",
            height: "300px",
            sortable: true,
            selectMode: "single",
            dragRow: true,
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
        }).columns(col => {
            col.add({ dataField: "dataField", label: "dataField", width: 200, editable: false, visible:false })
            col.add({ dataField: "editable", label: "editable", width: 200, editable: false, visible:false })
            col.add({ dataField: "name", label: "NAME", width: 200, editable: false })
            col.add({ dataField: "visible", label: "VISIBLE", width: 80, editable: true, type: "boolean" })
            col.add({ dataField: "width", label: "WIDTH", width: 80, editable: true })
            col.add({ dataField: "fix", label: "FIX", width: 80, editable: true, type: "boolean" })
         });

        //분할팝업 UI설정
        // 팝업
        $hs.html.$popup.init('modalDialog');     
        
         // 팝업
        $hs.html.$popup.init('modal_DAILY_CAPA_CALC');

        $hs.html.input.initAll();
        $hs.$("grid1").data(null);

        

        //DAILY_CAPA_CALC 팝업창 안에 Plan ID콤보박스
        $hs.html.select.init({
            id: "DAILY_CAPA_PLAN_ID",
            dataurl: "/api/data/PLAN_ID",
            valueMember: "PLAN_ID",
            displayMember: "PLAN_ID",
            val: first_plan_id
        });


    });



     // yyyy-mm-dd 포맷으로 변환하는 함수
    function formatDate(date) {
        const yyyy = date.getFullYear();
        const mm = String(date.getMonth() + 1).padStart(2, '0'); // month: 0-based
        const dd = String(date.getDate()).padStart(2, '0');
        return `${yyyy}-${mm}-${dd}`;
    }


    function fn_PROMISING_SPLIT_QTY_CALC(data) {
      let TOTAL_QTY_PCS = parseFloat($hs.$("PROMISING_ORDER_QTY").val());
      let PROMISING_SPLIT_QTY = parseFloat(data.value);

      if (PROMISING_SPLIT_QTY > 0) {
        let PROMISING_SPLIT_DAY = Math.ceil(TOTAL_QTY_PCS / PROMISING_SPLIT_QTY);
        $hs.$("PROMISING_SPLIT_DAY").val(PROMISING_SPLIT_DAY);
      } else {
        $hs.$("PROMISING_SPLIT_DAY").val("0"); // 또는 오류 처리
      }
    }

    window.addEventListener('DOMContentLoaded', function () {
        //document.getElementById('start_date').value = formatDate(new Date("2025-09-10") );
       // document.getElementById('end_date').value = formatDate(new Date("2025-09-10"));            
    });
    window.addEventListener('resize', function () {
        const zoomLevel = window.devicePixelRatio; // 예: 1.25, 1.5 등
        const windowHeight = window.innerHeight * zoomLevel;
        const newHeight = windowHeight - 490;

        // 마스터 그리드 초기화
        $hs.dx.grid.init({
            id: "grid1",
            width: "100%",
            autoHeight: true,
            height: ""+newHeight+"px",
        });
    });

</script>

<!-- s:Content Header (Page header) -->
<div class="content-header">
    <div class="header-location">
        <div class="header-title">
            <span class="sub-title">납기산출</span>
            <div class="toggle-container-favorites">
                <input type="checkbox" id="favorites-toggle" hidden>
                <label for="favorites-toggle" class="favorites-toggle">
                    <i class="bx bx-star"></i>
                </label>
            </div>
        </div>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#link"><i class="xi-ico xi-home"></i></a></li>
            <li class="breadcrumb-item active">ORDER PROMISING</li>
            <li class="breadcrumb-item active">납기산출</li>
        </ol>
    </div>
    <div class="header-setting">
        <div class="header-btn">
            <div class="filter-toggle-container">
                <span class="toggle-title">Search Area</span>
                <input type="checkbox" id="favorites-toggle-switch" hidden checked>
                <label for="favorites-toggle-switch" class="switch"></label>
            </div>
        </div>
    </div>
</div>
<!-- /e:Content Header -->
<hr>
<!-- s:content -->
<section class="content-body" flex>
    <div class="content row" flex>
        <div class="col-lg-12" flex>
            <!--상단블록-->
            <div class="content-box content-filter">
                <div class="box-body">
                    <div class="list-filter">
                        <div id="pnlSearch" class="filter-content form-inline">
                            <div class="form-group">
                                <div class="control-label"><label>GROUP</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="group_id" hs-df="group_id"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>ORDER DATE</label></div>
                                <div class="control-form">
                                    <div class="form-date-period">
                                        <input type="text" id="search_order_date" hs-df="search_order_date" class="form-datepicker form-control" data-toggle="datepicker" placeholder="">
                                        <!--  <input type="text" id="end_date" hs-df="end_date" class="form-datepicker form-control" data-toggle="datepicker" placeholder="End Date">-->
                                    </div>
                                </div>
                            </div>


                            <div class="form-group">
                                <div class="control-label"><label>납기일</label></div>
                                <div class="control-form">
                                    <div class="form-date-period">
                                        <input type="text" id="start_date" hs-df="start_date" class="form-datepicker form-control" data-toggle="datepicker" placeholder="Start Date">
                                        <input type="text" id="end_date" hs-df="end_date" class="form-datepicker form-control" data-toggle="datepicker" placeholder="End Date">
                                    </div>
                                </div>
                            </div>

                            <button type="button" class="btn btn-reset-icon"><span class="blind">filter reset</span></button>
                            <button id="btnSearch" type="button" class="btn btn-search-icon">Search<span class="blind">filter search</span></button>

                            <button id="btn_winopen_DAILY_CAPA_CALC" type="button" class="btn btn-add" hs-btn>병목공정 Capa Load 재계산</button>
                            <button id="btn_inout_simul_calc" type="button" class="btn btn-add" hs-btn>자재 입출고 시뮬레이션 재계산</button>

                        </div>
                    </div>
                </div>
            </div>
            <!--상단블록끝-->
            <!--하단 블록 -->
            <div class="content-box" flex>
                <!--  상단 그리드 블록 -->
                <!-- <div class="box-body" style="min-height: calc(100% - 200px);display: flex;flex-direction: column;"> -->
                <div class="box-body" flex style="flex: 7;">
                    <div class="box-header">
                        <div class="header-title">
                        </div>
                        <div class="header-btn">
                            <button id="btn_grid_save" type="button" class="btn btn-save">Save</button>
                            <button id="btn_grid_add" type="button" class="btn btn-add">Row Add</button>
                            <button id="btn_grid_delete" type="button" class="btn btn-delete">Delete</button>
                            <button id="btn_excel_download1" type="button" class="btn btn-download">Excel</button>
                        </div>
                    </div>
                    <div class="grid-container" style="height: 100%; ">
                        <div id="grid1"></div> <!--상단그리드 -->
                    </div>
                </div>
                <!-- 상단그리드 블록 끝-->
                <!--  하단 그리드 블록 -->
                <div class="box-body" style="flex: 3;">
                    <div class="box-header">
                        <div class="header-title">
                        </div>
                        <div class="header-btn">
                            <button id="btn_excel_download2" type="button" class="btn btn-download">Excel</button>
                        </div>
                    </div>
                    <div class="grid-container" flex>
                        <div id="grid2"></div><!--하단그리드 -->
                    </div>
                </div>
                <!--  하단 그리드 블록 끝-->
            </div>
            <!-- 하단 블록끝-->


        </div>
    </div>
</section>
<!-- /e:content -->
<!-- s:modal -->
<div id="modalDialog" style="display:none; position:absolute; height:400px;width:600px;">
    <div class="modal-content animate-top">
        <div id="modal-header" class="modal-header">
            <h5 class="modal-title">PERSONALIZATION</h5>
            <button type="button" class="btn-popup-close">
                <span class="xi-close-min" aria-hidden="true"></span>
            </button>
        </div>
        <div class="modal-body" id="panel_input">
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label"><label>Dimension</label></div>
                    </div>
                </div>
            </div>
            <div class="grid-container" flex>
                <div id="dimension_grid"></div>
            </div>
        </div>
        <div class="modal-footer">
            <button id="btnSave_dimension" type="button" class="btn btn-save">저장</button>
            <button type="button" class="btn btn-close btn-popup-close">닫기</button>
        </div>
    </div>
</div>
<!-- /e:modal -->

<div id="modal_DAILY_CAPA_CALC" style="display:none; position:absolute; width:390px;">
    <div class="modal-content" >
        <div class="modal-header">
            <h5 class="modal-title">Daily Capa산출</h5>
            <button type="button" class="btn-popup-close">
                <span class="xi-close-min" aria-hidden="true"></span>
            </button>
        </div>
        <div class="modal-body" style="min-height:100px">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="control-label"><label>PLAN ID</label></div>
                        <div class="control-form">
                            <select class="form-control" id="DAILY_CAPA_PLAN_ID" hs-df="PLAN_ID" style="width:180px" hs-handler="true"></select>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="control-label"><label></label></div>
                        <div class="control-form">
                            &nbsp;&nbsp;&nbsp;
                            <button id="btnSave_DAILY_CAPA_CALC"  style="width:120px" type="button" class="btn btn-add" hs-btn>산출</button>
                        </div>
                    </div>
                </div>
            </div> 
        </div>
        <div class="modal-footer">

            <button type="button" class="btn btn-close btn-popup-close">닫기</button> 
        </div>
    </div>
</div>





