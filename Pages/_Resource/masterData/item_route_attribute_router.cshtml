@page
@model HS.Web.Pages.item_route_attribute_router
@{
    string CLIENT = Model.Params["CLIENT"].AsString();
    string R = Model.Params["R"].AsString();
    string W = Model.Params["W"].AsString();
}


<script>

    $hs.handler = {
        "btn_reset" : {
            click: function() {
                // 값 초기화
                $hs.$("pnlSearch").reset();
            }
        },
        "btn_txt_box_open": {
            click: function () {
                $hs.$("txtBox").open();
            }
        },
        "btnSearch": {
            click: function () {

                let toServer = {};
                // TODO : toServer 객체로 만들기 위해서 pnlSearch 부분에 hs-df 추가 필요
                toServer["terms"] = $hs.$("pnlSearch").val();

                $hs.fetch({
                    command: "search",
                    param: toServer
                }).then(fromServer => {
                    $hs.$("router_info").data(fromServer["data"]);
                }).catch(e => $hs.errorBox(e))
            }
        },
        "router_info": {
            cellClick: function (data) {

            },
        },
        "btn_excel_download": {
            click : function() {
                let toServer = {};

                toServer["terms"] = $hs.$("pnlSearch").val();
                console.log("toServer = " + JSON.stringify(toServer));

                $hs.post({
                    command: "ExcelDownload",
                    param: toServer
                });
            }
        },
        "btn_grid_setting" : {
            click : function() {
                $hs.$("modalDialog").open();
            }
        }
    }

    $hs.load(() => {

        // search
        $hs.ui.button.init({ id: "btnSearch", class: ["smart-btn", "btn-search"] });

        // excel download
        $hs.ui.button.init({ id: "btn_excel_download"});
          
        // panel
        $hs.html.panel.init({ id: "pnlSearch" });

        // text Box open
        $hs.ui.button.init({ id: "btn_txt_box_open" });

        // router_info
        // TODO : 사용자별로 컬럼순서, 보여지는 컬럼 가져오도록 수정필요 --> 2차개발로?
        $hs.dx.grid.init({
            id: "router_info",
            width: "100%",
            height: "100%",
            sortable: true,
            selectMode: "single",
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
            reOrdering: true, // 컬럼 재배치 여부
        }).columns(col => {

                col.add({ dataField: "Item_Code", label: "Item Code", width: 150, editable: false })
                col.add({ dataField: "Rev", label: "Rev.", width: 100, editable: false })
                col.add({ dataField: "Customer", label: "Customer", width: 100, editable: false })
                col.add({ dataField: "Model", label: "Model", width: 100, editable: false })
                col.add({ dataField: "OP_Seq", label: "OP.Seq", width: 100, editable: false })
                col.add({ dataField: "Dept", label: "Dept.", width: 100, editable: false })
                col.add({ dataField: "Qty", label: "Qty", width: 100, editable: false })
                col.add({ dataField: "Type", label: "Type", width: 100, editable: false })
                col.add({ dataField: "Code", label: "Code", width: 100, editable: false })
                col.add({ dataField: "Name", label: "Name", width: 100, editable: false })
                col.add({ dataField: "Maker", label: "Maker", width: 100, editable: false })
                col.add({ dataField: "Characteristic", label: "Characteristic", width: 100, editable: false })
                col.add({ dataField: "Thickness", label: "Thickness", width: 100, editable: false })
                col.add({ dataField: "CFOZ", label: "CFOZ", width: 100, editable: false })
                col.add({ dataField: "TYPE2", label: "TYPE2", width: 100, editable: false })
                col.add({ dataField: "MODEL2", label: "MODEL2", width: 100, editable: false })
                col.add({ dataField: "PLY", label: "PLY", width: 100, editable: false })
                col.add({ dataField: "RC", label: "RC", width: 100, editable: false })
                col.add({ dataField: "TOTAL_THICKNESS", label: "TOTAL_THICKNESS", width: 100, editable: false })
                col.add({ dataField: "Size_X", label: "Size X", width: 100, editable: false })
                col.add({ dataField: "Size_Y", label: "Size Y", width: 100, editable: false })
                col.add({ dataField: "Color", label: "Color", width: 100, editable: false })
                col.add({ dataField: "Specific", label: "Specific", width: 100, editable: false })
                col.add({ dataField: "Width", label: "Width", width: 100, editable: false })
                col.add({ dataField: "Length", label: "Length", width: 100, editable: false })
                col.add({ dataField: "Mylar Thickness", label: "Mylar Thickness", width: 100, editable: false })
                col.add({ dataField: "ON_HAND_QTY", label: "ON_HAND_QTY", width: 100, editable: false })
                col.add({ dataField: "Remark", label: "Remark", width: 100, editable: true })
        });

        $("#router_info").dxDataGrid({
            onContextMenuPreparing: function(e) {
                // 컬럼 헤더에서만 우클릭 메뉴를 추가하도록 확인
                
                if (e.target === "header") {
                    // e.items가 정의되어 있는지 확인
                    if (!e.items) {
                        e.items = [];
                    }

                    const column = e.column;

                    // 컬럼 고정/고정 해제 메뉴 항목
                    e.items.push({
                        text: column.fixed ? "고정 해제" : "컬럼 고정",
                        onItemClick: function() {
                            var isFixed = column.fixed;
                            $("#router_info").dxDataGrid("instance").columnOption(column.dataField, "fixed", isFixed ? false : true);
                        }
                    });

                    // 컬럼 숨기기/보이기 메뉴 항목
                    e.items.push({
                        text: column.visible ? "컬럼 숨기기" : "컬럼 보이기",
                        onItemClick: function() {
                            var isVisible = column.visible;
                            $("#router_info").dxDataGrid("instance").columnOption(column.dataField, "visible", !isVisible);
                        }
                    });

                    // 모든 컬럼 보이기 항목 추가
                    e.items.push({
                        text: "모든 컬럼 보이기",
                        onItemClick: function() {
                            var gridInstance = $("#router_info").dxDataGrid("instance");

                            // 모든 컬럼의 이름(데이터 필드)을 가져옴
                            var columnNames = gridInstance.getVisibleColumns().map(function(column) {
                                return column.dataField;
                            });

                            // 컬럼들을 순회하며 숨겨진 컬럼을 다시 보이도록 설정
                            columnNames.forEach(function(columnName) {
                                gridInstance.columnOption(columnName, "visible", true);
                            });
                        }
                    });
                }
            }
        });

        // Search Filter
        $hs.html.select.init({ id: "cbo1", data: [{ label: "GROUP1", value: "GROUP1" }, { label: "GROUP2", value: "GROUP2" }, { label: "GROUP3", value: "GROUP3" }], val: "GROUP1" });
        $hs.html.select.init({ id: "cbo2", data: [{ label: "CATEGORY1", value: "CATEGORY1" }, { label: "CATEGORY2", value: "CATEGORY2" }, { label: "CATEGORY3", value: "CATEGORY3" }, { label: "CATEGORY4", value: "CATEGORY4" }], val: "CATEGORY1"});
        $hs.html.select.init({ id: "cbo3", data: [{ label: "a", value: "a" }, { label: "b", value: "b" }, { label: "c", value: "c" }, { label: "d", value: "d" }], val: "a" });

        $hs.dx.poptextbox.init({
            id: "txtBox",
            //label : "",
            placeholder: "",
            dataField: "DIV_CD",
            displayField: "DIV_NM",   // 단일 input으로 활용할때
            //displayBindField: "DIV_NM", // mergeParent가 true 이고 별도의 input에 바인딩이 필요할때
            width: "300px",
            enabled: true,
            val: {
                DIV_CD: "ALL", DIV_NM: "전체"
            }, // 객체형식으로 값을 설정
            mergeParent: true, //
            handler: true, // handler true 일시 이벤트 등록이 가능
            //handlerName : "testhandler", // 핸들러 명칭 지정시 해당 핸들러로 호출 가능
        }).popup(grid => {

            grid.set({
                width: "500px",
                height: "300",
                rownumber: true,
                dataurl: "/api/data/DIV_CD",
            });

            grid.columns(col => {
                col.add({
                    label: "테스트2", dataField: "DIV_CD", width: 200
                });

                col.add({
                    label: "테스트4", dataField: "DIV_NM", width: 200
                });
            })

        });
    });

</script>

<!-- s:Content Header (Page header) -->
<div class="content-header">
    <div class="header-location">
        <div class="header-title">
            <span class="sub-title">Item Route Attribute - Router</span>
            <div class="toggle-container-favorites">
                <input type="checkbox" id="favorites-toggle" hidden>
                <label for="favorites-toggle" class="favorites-toggle">
                    <i class="bx bx-star"></i>
                </label>
            </div>
        </div>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#link"><i class="xi-ico xi-home"></i></a></li>
            <li class="breadcrumb-item active">MASTER DATA</li>
            <li class="breadcrumb-item active">Item Route Attribute - Router</li>
        </ol>
    </div>
    <div class="header-setting">
        <div class="header-btn">
            <div class="filter-toggle-container">
                <span class="toggle-title">Search Area</span>
                <input type="checkbox" id="favorites-toggle-switch" hidden checked>
                <label for="favorites-toggle-switch" class="switch"></label>
            </div>
        </div>
    </div>
</div>
<!-- /e:Content Header -->
<hr>
<!-- s:content -->
<section class="content-body" flex>
    <div class="content row" flex>
        <div class="col-lg-12" flex>
            <div class="content-box content-filter">
                <div class="box-body">
                    <div class="list-filter">
                        <div id="pnlSearch" class="filter-content form-inline">
                            <div class="form-group">
                                <div class="control-label"><label>사업부</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="group_id" hs-df="group_id"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>APP USE</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="app_use" hs-df="app_use"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>외주</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="test2" hs-df="test2"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>위치</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="test3" hs-df="test3"></select>
                                </div>
                            </div>

                            <button type="button" class="btn btn-reset-icon"><span class="blind">filter reset</span></button>
                            <button id="btnSearch" type="button" class="btn btn-search-icon"><span class="blind">filter search</span></button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="content-box" flex>
                <div class="box-body" flex>
                    <div class="box-header">
                        <div class="header-title">Router 정보<span class="title-list-count"><small></small></span></div>
                        <div class="header-btn">
                            <button id="btn_grid_save" type="button" class="btn btn-save">save</button>
                            <button id="btn_excel_download" type="button" class="btn btn-download">excel</button>
                            <button id="btn_grid_setting" type="button" class="btn btn-setting-icon"><span class="blind">setting</span></button>
                        </div>
                    </div>
                    <div class="grid-container" flex>
                        <div id="router_info" data-grid-id="ITEM_ROUTE_ATTRIBUTE_ROUTER"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- /e:content -->