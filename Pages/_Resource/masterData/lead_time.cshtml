@page
@model HS.Web.Pages.lead_time
@{
    string CLIENT = Model.Params["CLIENT"].AsString();
    string R = Model.Params["R"].AsString();
    string W = Model.Params["W"].AsString();
}


<script>

    // 헤더컬럼 초기값 정의
    const defaultColumns = [
        // { dataField: "ORGANIZATION_ID", label: "ORGANIZATION_ID", width: 100, editable: false, visible: false },
        { dataField: "GROUP", label: "GROUP", width: 100, editable: false, align: "center" },
        { dataField: "CLASS CODE", label: "CLASS CODE", width: 100, editable: false },
        { dataField: "CLASS NAME", label: "CLASS NAME", width: 150, editable: false },
        // { dataField: "DEPARTMENT_ID", label: "DEPARTMENT_ID", width: 150, editable: false, visible: false },
        { dataField: "DEPARTMENT CODE", label: "DEPARTMENT CODE", width: 150, editable: false },
        { dataField: "DEPARTMENT NAME", label: "DEPARTMENT NAME", width: 150, editable: false },
        { dataField: "PROCESS(PLNA L/T)", label: "PROCESS", width: 120, editable: true, columnGroup: "PLAN_LT", align: "center", type:"number", precision:2},
        { dataField: "READY(PLAN L/T)", label: "READY", width: 120, editable: true, columnGroup: "PLAN_LT", align: "center", type:"number", precision:2},
        { dataField: "WAIT(PLAN L/T)", label: "WAIT", width: 120, editable: true, columnGroup: "PLAN_LT", align: "center", type:"number", precision:2},
        { dataField: "PROCESS AVG", label: "PROCESS AVG", width: 120, editable: false, columnGroup: "ACT_LT", align: "center", type:"number", precision:2},
        { dataField: "PROCESS AVG (ALL)", label: "PROCESS AVG (ALL)", width: 150, editable: false, columnGroup: "ACT_LT", align: "center", type:"number", precision:2},
        { dataField: "PROCESS MED", label: "PROCESS MED", width: 120, editable: false, columnGroup: "ACT_LT", align: "center", type:"number", precision:2},
        { dataField: "PROCESS MIN", label: "PROCESS MIN", width: 120, editable: false, columnGroup: "ACT_LT", align: "center", type:"number", precision:2},
        { dataField: "PROCESS MAX", label: "PROCESS MAX", width: 120, editable: false, columnGroup: "ACT_LT", align: "center", type:"number", precision:2},
        { dataField: "PROCESS DEV", label: "PROCESS DEV", width: 120, editable: false, columnGroup: "ACT_LT", align: "center", type:"number", precision:2},
        { dataField: "WAIT AVG", label: "WAIT AVG", width: 120, editable: false, columnGroup: "ACT_LT", align: "center", type:"number", precision:2},
        { dataField: "WAIT AVG (ALL)", label: "WAIT AVG (ALL)", width: 120, editable: false, columnGroup: "ACT_LT", align: "center", type:"number", precision:2},
        { dataField: "WAIT MED", label: "WAIT MED", width: 120, editable: false, columnGroup: "ACT_LT", align: "center", type:"number", precision:2},
        { dataField: "WAIT MIN", label: "WAIT MIN", width: 120, editable: false, columnGroup: "ACT_LT", align: "center", type:"number", precision:2},
        { dataField: "WAIT MAX", label: "WAIT MAX", width: 120, editable: false, columnGroup: "ACT_LT", align: "center", type:"number", precision:2},
        { dataField: "WAIT DEV", label: "WAIT DEV", width: 120, editable: false, columnGroup: "ACT_LT", align: "center", type:"number", precision:2},
        { dataField: "PROCESS(STD L/T)", label: "PROCESS", width: 120, editable: false, columnGroup: "STD_LT", align: "center", type:"number", precision:2},
        { dataField: "WAIT(STD L/T)", label: "WAIT", width: 120, editable: false, columnGroup: "STD_LT", align: "center", type:"number", precision:2},
        { dataField: "DATA COUNT", label: "DATA COUNT", width: 120, editable: false, align: "center", type: "number"},
        { dataField: "PROCESS DATA COUNT", label: "PROCESS DATA COUNT", width: 170, editable: false, align: "center", type: "number"},
        { dataField: "WAIT DATA COUNT", label: "WAIT DATA COUNT", width: 150, editable: false, align: "center"},
        { dataField: "USE(Y/N)", label: "USE(Y/N)", width: 100, editable: true, align: "center"},
        { dataField: "INSERT ID", label: "INSERT ID", width: 150, editable: false, align: "center" },
        { dataField: "INSERT DATE", label: "INSERT DATE", width: 150, editable: false, align: "center" },
        { dataField: "UPDATE ID", label: "UPDATE ID", width: 150, editable: false, align: "center" },
        { dataField: "UPDATE DATE", label: "UPDATE DATE", width: 150, editable: false, align: "center" }
    ];

    $hs.handler = {
        "btn_dept_class_name_open": {
            click: function () {
                $hs.$("department_class").open();
            }
        },
        "btn_dept_name_open": {
            click: function () {
                $hs.$("department").open();
            }
        },
        "btn_reset" : {
            click: function() {
                // 값 초기화
                $hs.$("pnlSearch").reset();
            }
        },
        "btnSearch": {
            click: function () {

                let toServer = {};
                toServer["terms"] = $hs.$("pnlSearch").val();

                console.log(toServer);

                $hs.fetch({
                    command: "search",
                    param: toServer
                }).then(fromServer => {

                    $hs.$("grid").data(fromServer["data"]);
                    $('#total_cnt').text('(Total Count:' + fromServer["data"].length + ')');
                }).catch(e => $hs.errorBox(e))
            }
        },
        "btn_grid_save": {
            click: function () {
                // $hs.$("grid").data().filter(f => f["$update"] == true);
                // console.log($hs.$("grid").data());


                let updated_data = [];
                // 클릭 이력으로 수정 or 입력여부 체크
                $hs.$("grid").data().forEach(item => {
                    if(item.$rowChecked == false ) {
                        updated_data.push(item);
                    }
                });

                let toServer = {};
                toServer["data"] = updated_data;

                if(toServer["data"].length == 0) {
                    alert("변경된 데이터가 없습니다.");
                }

                $hs.fetch({
                    command: "save",
                    param: toServer
                }).then(fromServer => {
                    alert("저장되었습니다.");
                }).catch(e => $hs.errorBox(e))
            },
        },
        "btn_excel_download": {
            click : function() {
                $hs.util.$CommonUtil.excelDownload("grid", "Lead_Time_info");
            }
        },
        "btn_grid_setting" : {  // dimension 세팅
            click : function() {
                // 그리드 세팅 modal open
                // param : modal_id, grid_id, dimension_grid_id
                $hs.util.$CommonUtil.openGridSettingModal("modalDialog", "grid", "dimension_grid");
            }
        },
        "btnSave_dimension" : { // dimension 변경내용 저장
            click : function() {
                $hs.util.$CommonUtil.saveGridSetting("modalDialog", "grid", "dimension_grid", defaultColumns);
            }
        },
        "grid" : {
            contextHeaderClick: function (data) {
                $hs.util.$CommonUtil.getHeaderContextClick(data);
            },
            headerFormat: function (data) {
                if (data.dataField == "PROCESS(PLNA L/T)") {
                    data.cell.css("color", "blue");
                }
                if (data.dataField == "READY(PLAN L/T)") {
                    data.cell.css("color", "blue");
                }
                if (data.dataField == "WAIT(PLAN L/T)") {
                    data.cell.css("color", "blue");
                }                
                if (data.dataField == "USE(Y/N)") {
                    data.cell.css("color", "blue");
                }
                data.cell.css("text-align", "center");
            },
        },
        "group_id" : {
            change : function(data){
                // 넘겨줄 파라미터
                let division_id = data.value;
                // department_class 데이터 변경
                // dept_class_name
                $hs.html.select.init({
                    id: "department_class",
                    dataurl: "/api/data/DEPARTMENT_CLASS?DIVISION_ID=" + division_id,
                    valueMember: "CODE",
                    displayMember: "NAME",
                    val: ""
                });
                // department 데이터 변경
                $hs.html.select.init({
                    id: "department",
                    dataurl: "/api/data/DEPARTMENT_NAME?DIVISION_ID=" + division_id,
                    valueMember: "CODE",
                    displayMember: "NAME",
                    val: ""
                });
            }
        },
        "department_class" : {
            change : function(data) {
                console.log(data.value);
                let DEPARTMENT_CLASS_CODE = data.value;
                // dept_name 데이터 변경
                // department 데이터 변경
                $hs.html.select.init({
                    id: "department",
                    dataurl: "/api/data/DEPARTMENT_NAME?DEPARTMENT_CLASS_CODE=" + DEPARTMENT_CLASS_CODE,
                    valueMember: "CODE",
                    displayMember: "NAME",
                    val: ""
                });
            }
        }
    }

    $hs.load(() => {
        // 현재 localStorage에 저장된 메뉴 ID 가져옴
        var curMenuId = localStorage.getItem("curMenuId"); 
        // 즐겨찾기 여부 체크 후 버튼 리스너 추가
        $hs.util.$CommonUtil.checkFavorite(curMenuId);

        // search
        $hs.ui.button.init({ id: "btnSearch", class: ["smart-btn", "btn-search"] });

        // grid save
        $hs.ui.button.init({ id: "btn_grid_save", enabled: @W });

        // excel download
        $hs.ui.button.init({ id: "btn_excel_download"});
          
        // panel
        $hs.html.panel.init({ id: "pnlSearch" });

        // grid setting
        $hs.ui.button.init({ id: "btn_grid_setting"});
        $hs.ui.button.init({ id: "btnSave_dimension"});

        // grid
        $hs.dx.grid.init({
            id: "grid",
            width: "100%",
            height: "100%",
            sortable: true,
            selectMode: "single",
            rownumber: false,
            filterable: true,
            editable: true,
            handler: true,
            reOrdering: true, // 컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        })
        .columnGroups(group => {
            group.add({
                label : "PLAN L/T"
                , name : "PLAN_LT"
                , align : "center"
            });

            group.add({
                label: "STD L/T"
                , name: "STD_LT"
                , align : "center"
            });

            group.add({
                label: "ACTUAL L/T"
                , name: "ACT_LT"
                , align : "center"
            });

        })
        



        // 그리드 컬럼가져오기
        // 1. id로 사용할 grid_id(js용)
        // 2. 초기화용 컬럼들 (LIST)
        // <div id="grid" data-grid-id="RESOURCE_GRID"></div>
        $hs.util.$CommonUtil.getGridSetting("grid", defaultColumns);


        const _instance = $hs.$("grid")._instance;
        // 컬럼 라인 그리기
        _instance.option('showColumnLines', true);
        _instance.option('rowAlternationEnabled', false);
        _instance.option('showBorders', true);
        _instance.option('scrolling', {
            showScrollbar: 'always',
            useNative: true
        });

        // demension grid
        $hs.dx.grid.init({
            id: "dimension_grid",
            width: "100%",
            height: "300px",
            sortable: true,
            selectMode: "single",
            dragRow: true,
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
        }).columns(col => {
            col.add({ dataField: "dataField", label: "dataField", width: 200, editable: false, visible:false })
            col.add({ dataField: "editable", label: "editable", width: 200, editable: false, visible:false })
            col.add({ dataField: "name", label: "NAME", width: 200, editable: false })
            col.add({ dataField: "visible", label: "VISIBLE", width: 80, editable: true, type: "boolean" })
            col.add({ dataField: "width", label: "WIDTH", width: 80, editable: true })
            col.add({ dataField: "fix", label: "FIX", width: 80, editable: true, type: "boolean" })
        });


        // Division
        $hs.html.select.init({
            id: "group_id",
            dataurl: "/api/data/DIVISION_LIST",
            valueMember: "CODE",
            displayMember: "NAME",
            val: ""
        });

        // dept_class_name
        $hs.html.select.init({
            id: "department_class",
            dataurl: "/api/data/DEPARTMENT_CLASS",
            valueMember: "CODE",
            displayMember: "NAME",
            val: ""
        });

        // department
        $hs.html.select.init({
            id: "department",
            dataurl: "/api/data/DEPARTMENT_NAME",
            valueMember: "CODE",
            displayMember: "NAME",
            val: ""
        });

        // USE Y/N
        $hs.html.select.init({ 
            id: "use_yn", 
            data: [
                { label: "ALL", value: "" },
                { label: "Y", value: "Y" }, 
                { label: "N", value: "N" }
            ], 
            val: "" 
        });

        // Empty plan only
        $hs.html.select.init({
            id: "empty_plan_only",
            data: [
                { label: "ALL", value: "" },
                { label: "Y", value: "Y" },
                { label: "N", value: "N" }
            ],
            val: ""
        });
        
        // 팝업
        $hs.html.$popup.init('modalDialog');

        $hs.html.input.initAll();
    });

</script>

<!-- s:Content Header (Page header) -->
<div class="content-header">
    <div class="header-location">
        <div class="header-title">
            <span class="sub-title">Lead Time</span>
            <div class="toggle-container-favorites">
                <input type="checkbox" id="favorites-toggle" hidden>
                <label for="favorites-toggle" class="favorites-toggle">
                    <i class="bx bx-star"></i>
                </label>
            </div>
        </div>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#link"><i class="xi-ico xi-home"></i></a></li>
            <li class="breadcrumb-item active">MASTER DATA</li>
            <li class="breadcrumb-item active">Lead Time</li>
        </ol>
    </div>
    <div class="header-setting">
        <div class="header-btn">
            <div class="filter-toggle-container">
                <span class="toggle-title">Search Area</span>
                <input type="checkbox" id="favorites-toggle-switch" hidden checked>
                <label for="favorites-toggle-switch" class="switch"></label>
            </div>
        </div>
    </div>
</div>
<!-- /e:Content Header -->
<hr>
<!-- s:content -->
<section class="content-body" flex>
    <div class="content row" flex>
        <div class="col-lg-12" flex>
            <div class="content-box content-filter">
                <div class="box-body">
                    <div class="list-filter">
                        <div id="pnlSearch" class="filter-content form-inline">
                                
                            <div class="form-group">
                                <div class="control-label"><label>GROUP</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="group_id" hs-df="group_id" hs-handler="true"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>Department Class</label></div>
                                <div class="control-form">
                                    <select style="width:200px !important;" class="form-control" id="department_class" hs-df="department_class" hs-handler="true"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>Department</label></div>
                                <div class="control-form">
                                    <select style="width:200px !important;" class="form-control" id="department" hs-df="department" hs-handler="true"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>USE_YN</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="use_yn" hs-df="use_yn" hs-handler="true"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>Empty Plan LT</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="empty_plan_only" hs-df="empty_plan_only" hs-handler="true"></select>
                                </div>
                            </div>
                            
                            <button id="btn_reset" type="button" class="btn btn-reset-icon" hs-btn><span class="blind">filter reset</span></button>
                            <button id="btnSearch" type="button" class="btn btn-search-icon" hs-btn>Search<span class="blind">filter search</span></button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="content-box" flex>
                <!-- 헤더부분 정의-->
                <div class="box-header">
                    <div class="header-title">
                        Lead Time
                        <span class="title-list-count">
                            <small id="total_cnt"></small><small id="grid_cal" class="" style="color: black;margin-left: 10px;font-weight: 500;"></small>
                        </span>
                    </div>
                    <div class="header-btn">
                        <button id="btn_grid_save" type="button" class="btn btn-save">save</button>
                        <button id="btn_excel_download" type="button" class="btn btn-download">excel</button>
                        <button id="btn_grid_setting" type="button" class="btn btn-setting-icon"><span class="blind">setting</span></button>
                    </div>
                </div>
                <!-- 바디부분 정의-->
                <div class="box-body" flex>
                    <div class="grid-container" flex>
                        <div id="grid" data-grid-id="LEAD_TIME"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- /e:content -->
<!-- s:modal -->
<div id="modalDialog" style="display:none; position:absolute; height:400px;width:600px;">
    <div class="modal-content animate-top">
        <div id="modal-header" class="modal-header">
            <h5 class="modal-title">PERSONALIZATION</h5>
            <button type="button" class="btn-popup-close">
                <span class="xi-close-min" aria-hidden="true"></span>
            </button>
        </div>
        <div class="modal-body" id="panel_input">
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label"><label>Dimension</label></div>
                    </div>
                </div>
            </div>
            <div class="grid-container" flex>
                <div id="dimension_grid"></div>
            </div>
        </div>
        <div class="modal-footer">
            <button id="btnSave_dimension" type="button" class="btn btn-save">저장</button>
            <button type="button" class="btn btn-close btn-popup-close">닫기</button>
        </div>
    </div>
</div>
<!-- /e:modal -->