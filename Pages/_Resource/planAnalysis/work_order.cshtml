@page
@model HS.Web.Pages.work_order
@{
    string CLIENT = Model.Params["CLIENT"].AsString();
    string R = Model.Params["R"].AsString();
    string W = Model.Params["W"].AsString();
    string first_plan_id = Model.Params["first_plan_id"].AsString();
}


<script>

    // 최신버번 PLAN_ID
    let first_plan_id = '@first_plan_id';

    // 헤더컬럼 초기값 정의
        const defaultColumns = [
            { dataField: "DIVISION_ID", label: "GROUP", width: 100, editable: false },
            { dataField: "DEPT_CLASS_NAME", label: "PLAN_CLASS_NAME", width: 160, editable: false },
            { dataField: "DEPT_NAME", label: "PLAN_DEPT_NAME", width: 160, editable: false },
            { dataField: "SITE_ID", label: "PLAN SITE", width: 100, editable: false },
            { dataField: "RESOURCE_NAME", label: "RESOURCE_NAME", width: 200, editable: false },
            { dataField: "SCH_DATE", label: "SCH_DATE", width: 100, editable: false, type:"date" },
            { dataField: "COMPLETE_DATE", label: "COMPLETE_DATE", width: 130, editable: false, type:"date" },
            { dataField: "DELTA", label: "DELTA", width: 100, editable: false, type:"number", precision:2 },
            { dataField: "JOB_NAME", label: "JOB_NAME", width: 150, editable: false },
            { dataField: "CUR_DEPT_NAME", label: "DEPT_NAME", width: 160, editable: false },
            { dataField: "CUSTOMER", label: "CUSTOMER", width: 100, editable: false },
            { dataField: "MODEL_NAME", label: "MODEL", width: 200, editable: false },
            { dataField: "ITEM_CODE", label: "ITEM_CODE", width: 120, editable: false },
            { dataField: "PRODUCT_WPNL", label: "PRODUCT_WPNL", width: 130, editable: false, type:"number" },
            { dataField: "PRODUCT_PCS", label: "PRODUCT_PCS", width: 130, editable: false, type:"number" },
            { dataField: "PRODUCT_M2", label: "PRODUCT_M2", width: 130, editable: false, type:"number", precision:2 },
            { dataField: "LAYER", label: "LAYER", width: 100, editable: false },
            { dataField: "CUR_OPER_SEQ", label: "OPER_SEQ", width: 100, editable: false },
            { dataField: "OPER_SEQ", label: "PLAN_OPER_SEQ", width: 100, editable: false },
            { dataField: "INNER_OUTER", label: "IN/OUT", width: 120, editable: false },
            { dataField: "PATTERN_GUBUN", label: "MSAP", width: 100, editable: false },
            { dataField: "DEPT_CLASS_CODE", label: "PLAN_CLASS_CODE", width: 100, editable: false, visible: false },
            { dataField: "DEPT_CODE", label: "PLAN_DEPT_CODE", width: 100, editable: false, visible: false },
            { dataField: "RESOURCE_CAPA_GROUP_NAME", label: "PLAN_RESOURCE_CAPA_GROUP_NAME", width: 180, editable: false, visible: false },
            { dataField: "URJENT", label: "URGENT", width: 100, editable: false, visible: false },
            { dataField: "REVISION", label: "REVISION", width: 80, editable: false, visible: false },
            { dataField: "CUR_DEPT_CODE", label: "DEPT_CODE", width: 100, editable: false, visible: false },
            { dataField: "CLOCK_ACCEPT_TIME", label: "CLOCK_ACCEPT_TIME", width: 160, editable: false, type:"datetime", visible: false },
            { dataField: "PROCESS_START_TIME", label: "PROCESS_START_TIME", width: 160, editable: false, type:"datetime", visible: false },
            { dataField: "PROCESS_END_TIME", label: "PROCESS_END_TIME", width: 160, editable: false, type:"datetime", visible: false },
            { dataField: "CLOCK_OUT_TIME", label: "CLOCK_OUT_TIME", width: 160, editable: false, type:"datetime", visible: false },
            { dataField: "OPERATION_QTY", label: "OPERATION_QTY", width: 120, editable: false, type:"number", precision: 2, visible: false },

            { dataField: "LAYUP_TYPE", label: "LAYUP", width: 100, editable: false },
            { dataField: "CATEGORY3", label: "MFG_CATEGORY", width: 100, editable: false },
            // { dataField: "MFG_CATEGORY", label: "MFG_CATEGORY", width: 100, editable: false },
            { dataField: "FINISH", label: "표면처리", width: 100, editable: false },
            { dataField: "HOT_PRESS_COUNT", label: "MLB_CNT", width: 100, editable: false },
            { dataField: "EB", label: "E/B", width: 100, editable: false },
            { dataField: "SM_COLOR", label: "SM Link", width: 100, editable: false },
            { dataField: "PATTERN_CU_TYPE", label: "FILL_TYPE", width: 100, editable: false },
            { dataField: "HOLE_TYPE_NAME", label: "HOLE", width: 100, editable: false },
            { dataField: "THICKNESS", label: "THK", width: 100, editable: false },
            { dataField: "FINAL_THK", label: "FINAL_THK", width: 100, editable: false },
            { dataField: "SM_PRINT", label: "SM 인쇄", width: 180, editable: false },
            { dataField: "NO_GUANG_TYPE", label: "노광 TYPE", width: 180, editable: false },
            { dataField: "SM_CUR", label: "SM 현상", width: 180, editable: false },
            { dataField: "PLASMA", label: "PLASMA", width: 180, editable: false },
            { dataField: "MASK", label: "MASK", width: 180, editable: false },
            { dataField: "OSP", label: "OSP", width: 180, editable: false },
            { dataField: "SOP", label: "SOP", width: 180, editable: false },
            { dataField: "SINGLATION", label: "SINGULATION", width: 180, editable: false },
            { dataField: "LAZ", label: "LAZ", width: 180, editable: false },
            { dataField: "PROCESSING_TIME_HR", label: "PROCESSING_TIME_HR", width: 165, editable: false, visible: false },
            { dataField: "ESSENTIAL_WAITING_TIME_HR", label: "ESSENTIAL_WAITING_TIME_HR", width: 235, editable: false, visible: false },
            { dataField: "WAITING_TIME_HR", label: "WAITING_TIME_HR", width: 100, editable: false, visible: false },
            { dataField: "START_DATE", label: "START_DATE", width: 160, editable: true, type:"date" },
            { dataField: "WORK_SEQ", label: "WORK_SEQ", width: 160, editable: false},
            { dataField: "SHIFT", label: "SHIFT", width: 130, editable: false },
            { dataField: "SMESSAGE", label: "전달사항", width: 150, editable: true},
            { dataField: "REMARK", label: "미달사유", width: 150, editable: true}
        ];

    $hs.handler = {
        "btn_reset" : {
            click: function() {
                // 값 초기화
                $hs.$("pnlSearch").reset();
            }
        },
        "btn_plan_id_box_open": {
            click: function () {
                $hs.$("plan_id").open();
            }
        },
        "btnSearch": {
            click: function () {

                let toServer = {};
                toServer["terms"] = $hs.$("pnlSearch").val();

                $hs.fetch({
                    command: "search",
                    param: toServer
                }).then(fromServer => {
                    console.log(fromServer["data"]);

                    $hs.$("grid").data(fromServer["data"]);
                    $('#total_cnt').text('(Total Count:' + fromServer["data"].length + ')');

                    // Total Count 항목에 PRODUCT_WPNL, PRODUCT_PCS, PRODUCT_M2 합계 추가 표기
                    let totalWPNL = 0;
                    let totalPCS = 0;
                    let totalM2 = 0;

                    fromServer["data"].forEach((item) => {
                        totalWPNL += Number(item.PRODUCT_WPNL) || 0;
                        totalPCS += Number(item.PRODUCT_PCS) || 0;
                        totalM2 += Number(item.PRODUCT_M2) || 0;
                    });

                    $('#cal_cnt').text(
                      '  ( WPNL:' + totalWPNL.toLocaleString() +
                      ' /  PCS: ' + totalPCS.toLocaleString() +
                      ' /  M2:' + totalM2.toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }) +
                      ' )'
                    );


                }).catch(e => $hs.errorBox(e))
            }
        },
        "btn_grid_save": {
            click: function () {
                // alert('준비중 입니다.');

                let rowsAllData = $hs.$("grid").data();
                let updated_data = [];

                // 선택된 PLAN_ID 가져오기
                let selectedPlanId = $("#plan_id").val(); // 또는 $hs.$("plan_id").val();


                //수정된 행 배열에 담기
                for (var D of rowsAllData) {
                     if(D["$update"] === true)
                     {
                         D["PLAN_ID"] = selectedPlanId; // PLAN_ID 추가
                         updated_data.push(D);
                     }
                }

                let toServer = {};
                toServer["data"] = updated_data;

                console.log(toServer);

                if(toServer["data"].length == 0) {
                    alert("변경된 데이터가 없습니다.");
                }

                $hs.fetch({
                    command: "save",
                    param: toServer
                }).then(fromServer => {
                    alert("저장되었습니다.");
                    $hs.handler["btnSearch"].click();
                }).catch(e => $hs.errorBox(e))
            },
        },
        "btn_excel_download": {
            click : function() {
                $hs.util.$CommonUtil.excelDownload("grid", "작업지시");
            }
        },
        "btn_grid_setting" : {  // dimension 세팅
            click : function() {
                // 그리드 세팅 modal open
                // param : modal_id, grid_id, dimension_grid_id
                $hs.util.$CommonUtil.openGridSettingModal("modalDialog", "grid", "dimension_grid");
            }
        },
        "btnSave_dimension" : { // dimension 변경내용 저장
            click : function() {
                $hs.util.$CommonUtil.saveGridSetting("modalDialog", "grid", "dimension_grid");
            }
        },
        "grid": {
            contextHeaderClick: function (data) {
                $hs.util.$CommonUtil.getHeaderContextClick(data);
            },
            headerFormat: function (data) {
                if (data.dataField == "REMARK" || data.dataField == "SMESSAGE") {
                    data.cell.css("color", "blue");
                }
                data.cell.css("text-align", "center");
            },
            //셀이 변경 되면 data.rowData["$update"] = true 입력함
            cellValueChanged: function (data) {
                data.rowData["$update"] = true;
            },
        },
        "group_id" : {
            change : function(data){
                // 넘겨줄 파라미터
                let division_id = data.value;
                // dept_class_name 데이터 변경
                // dept_class_name
                $hs.html.select.init({
                    id: "dept_class_name",
                    dataurl: "/api/data/DEPARTMENT_CLASS?DIVISION_ID=" + division_id,
                    valueMember: "CODE",
                    displayMember: "NAME",
                    val: ""
                });

                // dept_class_name
                $hs.html.select.init({
                    id: "dept_name",
                    dataurl: "/api/data/DEPARTMENT_NAME?DIVISION_ID=" + division_id,
                    valueMember: "CODE",
                    displayMember: "NAME",
                    val: ""
                });
            }
        },
        "dept_class_name" : {
            change : function(data) {
                let DEPARTMENT_CLASS_CODE = data.value;
                // dept_name 데이터 변경
                // dept_class_name
                $hs.html.select.init({
                    id: "dept_name",
                    dataurl: "/api/data/DEPARTMENT_NAME?DEPARTMENT_CLASS_CODE=" + DEPARTMENT_CLASS_CODE,
                    valueMember: "CODE",
                    displayMember: "NAME",
                    val: ""
                });
            }
        }
    }

    $hs.load(() => {
        // 현재 localStorage에 저장된 메뉴 ID 가져옴
        var curMenuId = localStorage.getItem("curMenuId"); 
        // 즐겨찾기 여부 체크 후 버튼 리스너 추가
        $hs.util.$CommonUtil.checkFavorite(curMenuId);

        // search
        $hs.ui.button.init({ id: "btnSearch", class: ["smart-btn", "btn-search"] });

        // grid save
        $hs.ui.button.init({ id: "btn_grid_save", enabled: @W });

        // excel download
        $hs.ui.button.init({ id: "btn_excel_download"});
          
        // panel
        $hs.html.panel.init({ id: "pnlSearch" });

        // grid setting
        $hs.ui.button.init({ id: "btn_grid_setting"});
        $hs.ui.button.init({ id: "btnSave_dimension"});

        // grid
        $hs.dx.grid.init({
            id: "grid",
            width: "100%",
            height: "100%",
            sortable: true,
            selectMode: "single",
            rownumber: false,
            filterable: true,
            editable: true,
            handler: true,
            reOrdering: true, // 컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        })
        

        // 그리드 컬럼가져오기
        // 1. id로 사용할 grid_id(js용)
        // 2. 초기화용 컬럼들 (LIST)
        // <div id="lot_routing_sequence_info" data-grid-id="RESOURCE_GRID"></div>
        $hs.util.$CommonUtil.getGridSetting("grid", defaultColumns);

        const _instance = $hs.$("grid")._instance;
        // 컬럼 라인 그리기
        _instance.option('showColumnLines', true);
        _instance.option('rowAlternationEnabled', false);
        _instance.option('showBorders', true);
        _instance.option('scrolling', {
            showScrollbar: 'always',
            useNative: true
        });


        // demension grid
        $hs.dx.grid.init({
            id: "dimension_grid",
            width: "100%",
            height: "300px",
            sortable: true,
            selectMode: "single",
            dragRow: true,
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
        }).columns(col => {
            col.add({ dataField: "dataField", label: "dataField", width: 200, editable: false, visible:false })
            col.add({ dataField: "editable", label: "editable", width: 200, editable: false, visible:false })
            col.add({ dataField: "name", label: "NAME", width: 200, editable: false })
            col.add({ dataField: "visible", label: "VISIBLE", width: 80, editable: true, type: "boolean" })
            col.add({ dataField: "width", label: "WIDTH", width: 80, editable: true })
            col.add({ dataField: "fix", label: "FIX", width: 80, editable: true, type: "boolean" })
        });

        $hs.html.select.init({
            id: "plan_id",
            dataurl: "/api/data/PLAN_ID",
            valueMember: "PLAN_ID",
            displayMember: "PLAN_ID",
            val: first_plan_id
        });

        $hs.html.select.init({
            id: "group_id",
            dataurl: "/api/data/DIVISION_LIST",
            valueMember: "CODE",
            displayMember: "NAME",
            val: ""
        });

        // dept_class_name
        $hs.html.select.init({
            id: "dept_class_name",
            dataurl: "/api/data/DEPARTMENT_CLASS",
            valueMember: "CODE",
            displayMember: "NAME",
            val: ""
        });

        // dept_class_name
        $hs.html.select.init({
            id: "dept_name",
            dataurl: "/api/data/DEPARTMENT_NAME",
            valueMember: "CODE",
            displayMember: "NAME",
            val: ""
        });

        // shift
        $hs.html.select.init({ id: "shift", data: [{ label : "ALL", value: "" }, { label : "DAY", value: "DAY" }, { label : "NIGHT", value: "NIGHT" }], val: "" });

        // Date
        const today = new Date();

        // yyyy-MM-dd 형식으로 변환
        const yyyy = today.getFullYear();
        const mm = String(today.getMonth() + 1).padStart(2, '0');
        const dd = String(today.getDate()).padStart(2, '0');
        const formattedDate = `${yyyy}-${mm}-${dd}`;

        // 입력창에 값 설정
        document.getElementById("start_date").value = formattedDate;
        document.getElementById("end_date").value = formattedDate;
        
        // 팝업
        $hs.html.$popup.init('modalDialog');

        $hs.html.input.initAll();
    });

</script>

<!-- s:Content Header (Page header) -->
<div class="content-header">
    <div class="header-location">
        <div class="header-title">
            <span class="sub-title">작업지시 (관리자용)</span>
            <div class="toggle-container-favorites">
                <input type="checkbox" id="favorites-toggle" hidden>
                <label for="favorites-toggle" class="favorites-toggle">
                    <i class="bx bx-star"></i>
                </label>
            </div>
        </div>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#link"><i class="xi-ico xi-home"></i></a></li>
            <li class="breadcrumb-item active">PLAN ANALYSIS</li>
            <li class="breadcrumb-item active">작업지시 (관리자용)</li>
        </ol>
    </div>
    <div class="header-setting">
        <div class="header-btn">
            <div class="filter-toggle-container">
                <span class="toggle-title">Search Area</span>
                <input type="checkbox" id="favorites-toggle-switch" hidden checked>
                <label for="favorites-toggle-switch" class="switch"></label>
            </div>
        </div>
    </div>
</div>
<!-- /e:Content Header -->
<hr>
<!-- s:content -->
<section class="content-body" flex>
    <div class="content row" flex>
        <div class="col-lg-12" flex>
            <div class="content-box content-filter">
                <div class="box-body">
                    <div class="list-filter">
                        <div id="pnlSearch" class="filter-content form-inline">
                            <div class="form-group">
                                <div class="control-label"><label>PLAN ID</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="plan_id" hs-df="PLAN_ID" hs-handler="true"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>GROUP</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="group_id" hs-df="group_id" hs-handler="true"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>PLAN DEPT CLASS</label></div>
                                <div class="control-form">
                                    <select style="width:200px !important;" class="form-control" id="dept_class_name" hs-df="dept_class_name" hs-handler="true"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>PLAN DEPT NAME</label></div>
                                <div class="control-form">
                                    <select style="width:200px !important;" class="form-control" id="dept_name" hs-df="dept_name" hs-handler="true"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>Customer</label></div>
                                <div class="control-form">
                                    <input type="text" id="customer" hs-df="customer" class="form-control" placeholder="Search" style="width:100px;">
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>ITEM CODE</label></div>
                                <div class="control-form">
                                    <input type="text" id="item_code" hs-df="item_code" class="form-control" placeholder="Search" style="width:120px;">
                                </div>
                            </div>

                            <div class="form-group"> 
                                <div class="control-label"><label>DATE</label></div> 
                                <div class="control-form"> 
                                    <div class="form-date-period"> 
                                        <input type="text" id="start_date" hs-df="start_date" class="form-datepicker form-control" data-toggle="datepicker" placeholder="Start Date"> 
                                        <span class="date-term">~</span> 
                                        <input type="text" id="end_date" hs-df="end_date" class="form-datepicker form-control" data-toggle="datepicker" placeholder="End Date"> 
                                    </div> 
                                </div> 
                            </div> 

                            <div class="form-group">
                                <div class="control-label"><label>SHIFT</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="shift" hs-df="shift" hs-handler="true"></select>
                                </div>
                            </div>

                            <button id="btn_reset" type="button" class="btn btn-reset-icon" hs-btn><span class="blind">filter reset</span></button>
                            <button id="btnSearch" type="button" class="btn btn-search-icon">Search<span class="blind">filter search</span></button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="content-box" flex>
                <!-- 헤더부분 정의-->
                <div class="box-header">
                    <div class="header-title">
                        작업지시 정보
                        <span class="title-list-count">
                            <small id="total_cnt"></small><small id="grid_cal" class="" style="color: black;margin-left: 10px;font-weight: 500;"></small>
                            <small id="cal_cnt"></small><small id="grid_cal" class="" style="color: black;margin-left: 10px;font-weight: 500;"></small>
                        </span>
                    </div>
                    <div class="header-btn">
                        <button id="btn_grid_save" type="button" class="btn btn-save">save</button>
                        <button id="btn_excel_download" type="button" class="btn btn-download">excel</button>
                        <button id="btn_grid_setting" type="button" class="btn btn-setting-icon"><span class="blind">setting</span></button>
                    </div>
                </div>
                <!-- 바디부분 정의-->
                <div class="box-body" flex>
                    <div class="grid-container" flex>
                        <div id="grid" data-grid-id="STATUS_BY_LOT"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- /e:content -->
<!-- s:modal -->
<div id="modalDialog" style="display:none; position:absolute; height:400px;width:600px;">
    <div class="modal-content animate-top">
        <div id="modal-header" class="modal-header">
            <h5 class="modal-title">PERSONALIZATION</h5>
            <button type="button" class="btn-popup-close">
                <span class="xi-close-min" aria-hidden="true"></span>
            </button>
        </div>
        <div class="modal-body" id="panel_input">
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label"><label>Dimension</label></div>
                    </div>
                </div>
            </div>
            <div class="grid-container" flex>
                <div id="dimension_grid"></div>
            </div>
        </div>
        <div class="modal-footer">
            <button id="btnSave_dimension" type="button" class="btn btn-save">저장</button>
            <button type="button" class="btn btn-close btn-popup-close">닫기</button>
        </div>
    </div>
</div>
<!-- /e:modal -->