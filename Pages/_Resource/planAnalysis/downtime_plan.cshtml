@page
@model HS.Web.Pages.downtime_plan
@{
    string CLIENT = Model.Params["CLIENT"].AsString();
    string R = Model.Params["R"].AsString();
    string W = Model.Params["W"].AsString();
}


<script>

    $hs.handler = {
        "btn_reset" : {
            click: function() {                
                // 값 초기화
                $hs.$("pnlSearch").reset();
            }
        },
        "btnSearch": {
            click: function () {

                let toServer = {};
                toServer["terms"] = $hs.$("pnlSearch").val();


                $hs.fetch({
                    command: "search",
                    param: toServer
                }).then(fromServer => {

                    $hs.$("grid").data(fromServer["data"]);
                    $('#total_cnt').text('(Total Count:' + fromServer["data"].length + ')');
                }).catch(e => $hs.errorBox(e))
            }
        },
        "btn_grid_save": {
            click: function () {

                  let rowsAllData = $hs.$("grid").data();
                  let updated_data = [];

                  //수정된 행 배열에 담기
                  for (var D of rowsAllData) {
                       if(D["$update"] === true)
                       {
                           updated_data.push(D);
                       }
                  }

                  if(updated_data.length == 0) {
                       alert("변경된 데이터가 없습니다.");
                       return false;
                  }

                  let toServer = {};
                  toServer["terms"] = $hs.$("pnlSearch").val();
                  toServer["data"] = updated_data;

                  $hs.fetch({
                    command: "save",
                    param: toServer
                  }).then(fromServer => {
                    alert("저장되었습니다.");
                    $hs.$("grid").data(fromServer["data"]);

                  }).catch(e => $hs.errorBox(e))

            },
        },
        "btn_excel_download": {
            click : function() {
                $hs.util.$CommonUtil.excelDownload("grid", "비가동계획");
            }
        },
        "btn_grid_setting" : {  // dimension 세팅
            click : function() {
                // 그리드 세팅 modal open
                // param : modal_id, grid_id, dimension_grid_id
                $hs.util.$CommonUtil.openGridSettingModal("modalDialog", "grid", "dimension_grid");
            }
        },
        "btnSave_dimension" : { // dimension 변경내용 저장
            click : function() {
                $hs.util.$CommonUtil.saveGridSetting("modalDialog", "grid", "dimension_grid");
            }
        },
        "grid" : {
            contextHeaderClick: function (data) {
                $hs.util.$CommonUtil.getHeaderContextClick(data);
            },
            headerFormat: function (data) {
                if (data.dataField == "RESOURCE_CAPA_GROUP_ID" || data.dataField == "OFF_DATE" || data.dataField == "OFF_SHIFT"|| data.dataField == "CAPA_LOSS"|| data.dataField == "REMARK") {
                    data.cell.css("color", "blue");
                }
            }
        },
        "btn_ptb_resource_capa_group_id_open": {
                click: function () {
                $hs.$("ptb_RESOURCE_CAPA_GROUP_ID").open();
            }
        },
        "btn_grid_add": {
                click: function () {
                  $hs.$("grid").addRow(); // 빈행 마지막에 추가 하기

                setTimeout(() => {
                    const instance = $hs.$("grid")._instance;
                    const scrollable = instance.getScrollable();
                    if (scrollable) {
                        scrollable.scrollTo({ top: 999999 }); // 맨 아래로 스크롤
                    }
                }, 100);
            }
        }
        ,
        "btn_grid_delete": {
            click: function () {
                 let toServer = {};
                 toServer["terms"] = $hs.$("pnlSearch").val();
                let selData = $hs.$("grid").val();

                 if (selData.length == 0) {
                     alert("삭제할 항목을 체크해 주세요.");
                     return;
                 }

                 if(confirm("선택한 항목을 삭제 하시겠습니까?")){

                    toServer["data"] = selData;
                    $hs.fetch({
                        command: "delete",
                        param: toServer
                    }).then(fromServer => {
                        // 다시 조회
                        $hs.$("grid").data(fromServer["data"]);
                    }).catch(e => $hs.errorBox(e))

                }

            },
         },

    }

    $hs.load(() => {
        // 현재 localStorage에 저장된 메뉴 ID 가져옴
        var curMenuId = localStorage.getItem("curMenuId");
        // 즐겨찾기 여부 체크 후 버튼 리스너 추가
        $hs.util.$CommonUtil.checkFavorite(curMenuId);

         //검색박스 DIVISION
        $hs.html.select.init({
            id: "group_id",
            dataurl: "/api/data/DIVISION_LIST",
            valueMember: "CODE",
            displayMember: "NAME",
            val: "",
            visible : false
        });

        //팝업TEXT박스 설정
        $hs.dx.poptextbox.init({
            id: "ptb_RESOURCE_CAPA_GROUP_ID",
            placeholder: "",
            popValueField: "RESOURCE_CAPA_GROUP_ID",
            popTextField: "RESOURCE_CAPA_GROUP_ID",
            width: "200px",
            enabled: true,
            handler: true,
            mergeParent: true,
        }).popup(grid => {
            grid.set({
                width: "900px",
                height: "300",
                rownumber: true,
                dataurl: "/api/data/APS_ENG_SITE_RESOURCE_LIST_V__CAPA_GROUP_ID",
            });
            grid.columns(col => {
                col.add({
                dataField: "DIVISION_ID", label: "DIVISION", width: 80,
                });
                col.add({
                dataField  : "RESOURCE_CAPA_GROUP_ID", label: "CAPA_GROUP_ID", width: 200
                });
                col.add({
               dataField : "RESOURCE_CAPA_GROUP_NAME", label: "CAPA_GROUP_NAME", width: 200
                });
                col.add({
                dataField: "SITE_ID", label: "SITE_ID", width: 100,
                });
                col.add({
                dataField: "APS_RESOURCE_ID", label: "APS_RESOURCE_ID", width: 100,
                });

            })
        });



        $hs.html.select.init({
            id: "ddl_SITE_ID",
            dataurl: "/api/data/APS_ENG_SITE_RESOURCE_LIST_V__SITE_ID",
            valueMember: "SITE_ID",
            displayMember: "SITE_ID",
            val: "",
            enabled : false

        });

        // search
        $hs.ui.button.init({ id: "btnSearch", class: ["smart-btn", "btn-search"] });

        // grid save
        $hs.ui.button.init({ id: "btn_grid_save", enabled: @W });
        $hs.ui.button.init({ id: "btn_grid_delete", enabled: @W });
        $hs.ui.button.init({ id: "btn_grid_add", enabled: @W });
        $hs.ui.button.init({ id: "btn_excel_download"});
        $hs.ui.button.init({ id: "btn_reset"});
        
        // panel
        $hs.html.panel.init({ id: "pnlSearch" });

        // grid setting
        $hs.ui.button.init({ id: "btn_grid_setting"});
        $hs.ui.button.init({ id: "btnSave_dimension"});


        const now = new Date();
            // 이번 달의 첫날
        const startDate = new Date(now.getFullYear(), now.getMonth(), 1);
            // 이번 달의 마지막 날
        const endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
            // input에 값 설정
        document.getElementById('start_date').value = formatDate(startDate);
        document.getElementById('end_date').value = formatDate(endDate);





        // grid
        $hs.dx.grid.init({
            id: "grid",
            width: "100%",
            height: "100%",
            sortable: true,
            selectMode: "multiple",
            rownumber: false,
            filterable: true,
            editable: true,
            handler: true,
            reOrdering: true, // 컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        })
        .columns(col => {
             col.add({  dataField: "DIVISION_ID", label: "DIVISION", width: 100, editable: false,    })
             col.add({dataField: "APS_RESOURCE_ID", label: "APS_RESOURCE_ID", width: 200 , visible:false })
             col.add({
                      dataField: "RESOURCE_CAPA_GROUP_ID"
                    , displayField: "RESOURCE_CAPA_GROUP_ID" // displayField에 해당되는 정의된 컬럼이 있으면 그쪽으로 바인딩, 없으면 데이타소스에 저장
                    , label: "CAPA_GROUP_ID"
                    , width: 200
                    , popValueField: "RESOURCE_CAPA_GROUP_ID" // 팝업그리드에서 value에 해당되는 컬럼을 지정
                    , popTextField: "RESOURCE_CAPA_GROUP_ID"  // 팝업그리드에서 text에 해당되는 컬럼을 지정
                    , type: "poptextbox"
                    , mergeParent: true          // (기본값 (false))
                    , grid: {                    // 팝업 그리드 속성 정의
                        width: "900px",
                        height: "400px",
                        dataurl: "/api/data/APS_ENG_SITE_RESOURCE_LIST_V_PDATALIST",
                        columns: [

                            { label: "DIVISION", dataField: "DIVISION_ID", width: 100 },
                            { label: "APS_RESOURCE_ID", dataField: "APS_RESOURCE_ID", width: 200 },
                            { label: "CAPA_GROUP_ID", dataField: "RESOURCE_CAPA_GROUP_ID", width: 200 },
                            { label: "CAPA_GROUP_NAME", dataField: "RESOURCE_CAPA_GROUP_NAME", width: 200 },
                            { label: "SITE", dataField: "SITE_ID", width: 50 },
                            { label: "CNT", dataField: "RESOURCE_CNT", width: 100, align: "right"  },
                            { label: "CAPA/DAY", dataField: "APPLY_TOTAL_SITE_RCG_CAPA_M2_DAY_29",   type: "number",   align: "right", width: 100 },
                        ]
                    }
                })
             col.add({dataField: "RESOURCE_CAPA_GROUP_NAME" , label: "CAPA_GROUP_NAME", width:200 , editable: false })
             col.add({ dataField: "SITE_ID", label: "SITE", width: 120 , editable: false })
             col.add({  dataField: "RESOURCE_CNT", label: "CNT", width: 50, editable: false  ,visible:true , align: "right" })
             col.add({  dataField: "APPLY_TOTAL_SITE_RCG_CAPA_M2_DAY_29", label: "CAPA/DAY", type: "number",   align: "right", width: 100, editable: false   })
             col.add({  dataField: "OFF_DATE", label: "OFF DATE",  type: "date" , formatString : "yyyy-MM-dd" ,width: 100, editable: true , align: "center"  })
             col.add({
                      dataField: "OFF_SHIFT"
                    , displayField: "OFF_SHIFT"
                    , label: "SHIFT"
                    , width: 120
                    , popValueField: "OFF_SHIFT"
                    , popTextField: "OFF_SHIFT"
                    , type: "poptextbox"
                    , grid: {
                        width: "200px",
                        height: "200px",
                        dataurl: "/api/data/OFF_SHIFT",
                        columns: [

                            { label: "OFF_SHIFT", dataField: "OFF_SHIFT", width: 100 },
                        ]
                    }
              })
             // col.add({
             //        label: "OFF_SHIFT", dataField: "OFF_SHIFT", displayField: "OFF_SHIFT", width: 200, type: "combo", dataurl: "/api/data/OFF_SHIFT",
             //  });
             col.add({  dataField: "CAPA_LOSS", label: "CAPA LOSS", width: 100, editable: true  , type: "number",   align: "right", })
             col.add({  dataField: "REMARK", label: "REMARK", width: 200, editable: true   })
             col.add({  dataField: "OFF_RATE", label: "OFF RATE", width: 100, editable: true  , type: "number",   align: "right",  editable: false , })
             col.add({  dataField: "OFF_START_DTTM", label: "적용 Off 시작시간", width: 200, type: "datetime", formatString : "yyyy-MM-dd HH:mm:ss", editable: false , align: "center"   })
             col.add({  dataField: "OFF_END_DTTM", label: "적용 Off 종료시간", width: 200, type: "datetime" ,formatString : "yyyy-MM-dd HH:mm:ss", editable: false ,   align: "center", })

             col.add({  dataField: "USE_YN", label: "USE_YN", width: 100, editable: true , visible:false  })
         });





        // 그리드 컬럼가져오기
        // 1. id로 사용할 grid_id(js용)
        // 2. 초기화용 컬럼들 (LIST)
        // <div id="lot_routing_sequence_info" data-grid-id="RESOURCE_GRID"></div>
        //$hs.util.$CommonUtil.getGridSetting("grid", defaultColumns);

        const _instance = $hs.$("grid")._instance;
        // 컬럼 라인 그리기
        _instance.option('showColumnLines', true);
        _instance.option('rowAlternationEnabled', false);
        _instance.option('showBorders', true);
        _instance.option('scrolling', {
            showScrollbar: 'always',
            useNative: true
        });


        // demension grid
        $hs.dx.grid.init({
            id: "dimension_grid",
            width: "100%",
            height: "300px",
            sortable: true,
            selectMode: "single",
            dragRow: true,
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
        }).columns(col => {
            col.add({ dataField: "dataField", label: "dataField", width: 200, editable: false, visible:false })
            col.add({ dataField: "editable", label: "editable", width: 200, editable: false, visible:false })
            col.add({ dataField: "name", label: "NAME", width: 200, editable: false })
            col.add({ dataField: "visible", label: "VISIBLE", width: 80, editable: true, type: "boolean" })
            col.add({ dataField: "width", label: "WIDTH", width: 80, editable: true })
            col.add({ dataField: "fix", label: "FIX", width: 80, editable: true, type: "boolean" })
        });



        // 팝업
        $hs.html.$popup.init('modalDialog');

        $hs.html.input.initAll();
    });
      // yyyy-mm-dd 포맷으로 변환하는 함수
    function formatDate(date) {
        const yyyy = date.getFullYear();
        const mm = String(date.getMonth() + 1).padStart(2, '0'); // month: 0-based
        const dd = String(date.getDate()).padStart(2, '0');
        return `${yyyy}-${mm}-${dd}`;
    }
</script>


<script>
    // document.addEventListener("DOMContentLoaded", function () {
    //     console.log("$hs.handler 전체:", $hs.handler);
    // });
</script>

<!-- s:Content Header (Page header) -->
<div class="content-header">
    <div class="header-location">
        <div class="header-title">
            <span class="sub-title">비가동 계획</span>
            <div class="toggle-container-favorites">
                <input type="checkbox" id="favorites-toggle" hidden>
                <label for="favorites-toggle" class="favorites-toggle">
                    <i class="bx bx-star"></i>
                </label>
            </div>
        </div>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#link"><i class="xi-ico xi-home"></i></a></li>
            <li class="breadcrumb-item active">PLAN ANALYSIS</li>
            <li class="breadcrumb-item active">비가동 계획</li>
        </ol>
    </div>
    <div class="header-setting">
        <div class="header-btn">
            <div class="filter-toggle-container">
                <span class="toggle-title">Search Area</span>
                <input type="checkbox" id="favorites-toggle-switch" hidden checked>
                <label for="favorites-toggle-switch" class="switch"></label>
            </div>
        </div>
    </div>
</div>
<!-- /e:Content Header -->
<hr>
<!-- s:content -->
<section class="content-body" flex>
    <div class="content row" flex>
        <div class="col-lg-12" flex>
            <div class="content-box content-filter">
                <div class="box-body">
                    <div class="list-filter">
                        <div id="pnlSearch" class="filter-content form-inline">

                              <div class="form-group">
                                <div class="control-label"><label>DIVISION</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="group_id" hs-df="group_id" hs-handler="true"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>RESOURCE CAPA GROUP</label></div>
                                <div class="control-form">
                                    <div class="input-group form-search">
                                        <input type="text" id="ptb_RESOURCE_CAPA_GROUP_ID" class="form-control" placeholder="Search" hs-df="RESOURCE_CAPA_GROUP_ID" hs-dsf="RESOURCE_CAPA_GROUP_ID">
                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-search" id="btn_ptb_resource_capa_group_id_open" hs-handler="true" hs-btn><span class="blind">search</span></button>
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>SITE ID</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="ddl_SITE_ID" hs-df="SITE_ID" hs-handler="true"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>DATE</label></div>
                                <div class="control-form">
                                    <div class="form-date-period">
                                        <input type="text" id="start_date" hs-df="start_date" class="form-datepicker form-control" data-toggle="datepicker" placeholder="Start Date">
                                        <span class="date-term">~</span>
                                        <input type="text" id="end_date" hs-df="end_date" class="form-datepicker form-control" data-toggle="datepicker" placeholder="End Date">
                                    </div>
                                </div>
                            </div>


                            <button id="btn_reset" type="button" class="btn btn-reset-icon"><span class="blind">filter reset</span></button>
                            <button id="btnSearch" type="button" class="btn btn-search-icon">Search<span class="blind">filter search</span></button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="content-box" flex>
                <!-- 헤더부분 정의-->
                <div class="box-header">
                    <div class="header-title">
                        @* 작업지시 정보 *@
                        <span class="title-list-count">
                            <small id="total_cnt"></small><small id="grid_cal" class="" style="color: black;margin-left: 10px;font-weight: 500;"></small>
                        </span>
                    </div>
                    <div class="header-btn">
                        <button id="btn_grid_add" type="button" class="btn btn-add" hs-btn>Row Add</button>
                        <button id="btn_grid_delete" type="button" class="btn btn-delete">Delete</button>
                        <button id="btn_grid_save" type="button" class="btn btn-save">Save</button>
                        <button id="btn_excel_download" type="button" class="btn btn-download">Excel</button>
                        <button id="btn_grid_setting" type="button" class="btn btn-setting-icon"><span class="blind">Setting</span></button>
                    </div>
                </div>
                <!-- 바디부분 정의-->
                <div class="box-body" flex>
                    <div class="grid-container" flex>
                        <div id="grid" data-grid-id="downtime_plan"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- /e:content -->
<!-- s:modal -->
<div id="modalDialog" style="display:none; position:absolute; height:400px;width:600px;">
    <div class="modal-content animate-top">
        <div id="modal-header" class="modal-header">
            <h5 class="modal-title">PERSONALIZATION</h5>
            <button type="button" class="btn-popup-close">
                <span class="xi-close-min" aria-hidden="true"></span>
            </button>
        </div>
        <div class="modal-body" id="panel_input">
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label"><label>Dimension</label></div>
                    </div>
                </div>
            </div>
            <div class="grid-container" flex>
                <div id="dimension_grid"></div>
            </div>
        </div>
        <div class="modal-footer">
            <button id="btnSave_dimension" type="button" class="btn btn-save">저장</button>
            <button type="button" class="btn btn-close btn-popup-close">닫기</button>
        </div>
    </div>
</div>
<!-- /e:modal -->