@page
@model HS.Web.Pages.plan_grid
@{
    string CLIENT = Model.Params["CLIENT"].AsString();
    string R = Model.Params["R"].AsString();
    string W = Model.Params["W"].AsString();
    string first_plan_id = Model.Params["first_plan_id"].AsString();
}


<script>

    // 최신버번 PLAN_ID
    let first_plan_id = '@first_plan_id';

    // 헤더컬럼 초기값 정의
    let defaultColumns = [
        { dataField: "CATEGORY_LEVEL1", label: "Type", with:120,  editable: false, align:"center" },
        { dataField: "D_LAYER", label: "Layer", with:80,  editable: false, align:"center" },
        { dataField: "ITEM_CODE", label: "Item", with:130,  editable: false, align:"center" },
        { dataField: "DEMAND_COUNT", label: "Lot Cnt", with:80,  editable: false, align:"center", type:"number"},
        { dataField: "AVG_TAT", label: "TAT", with:80,  editable: false, align:"right", type:"number", precision:2 },
        { dataField: "MAX_TAT", label: "MAX TAT", with:80,  editable: false, align:"right", type:"number", precision:2 },
        { dataField: "MIN_TAT", label: "MIN TAT", with:80,  editable: false, align:"right", type:"number", precision:2 },
        { dataField: "STD_TAT", label: "표준편차", with:80,  editable: false, align:"right", type:"number", precision:2 }
    ];

    // 헤더컬럼 초기값 정의
    let defaultColumns2 = [
        { dataField: "CATEGORY_LEVEL1", label: "Type", with:120,  editable: false, align:"center" },
        { dataField: "D_LAYER", label: "Layer", with:80,  editable: false, align:"center" },
        { dataField: "THIS_MONTH", label: "당월", with:80,  editable: false, align:"right", type:"number", precision:2 },
        { dataField: "NEXT_MONTH", label: "차월", with:80,  editable: false, align:"right", type:"number", precision:2 }
    ];

    $hs.handler = {
        "btn_reset" : {
            click: function() {
                // 값 초기화
                $hs.$("pnlSearch").reset();
            }
        },
        "btnSearch": {
            click: function () {

                let toServer = {};
                toServer["terms"] = $hs.$("pnlSearch").val();

                $hs.fetch({
                    command : "search",
                    param : toServer
                }).then(fromServer => {

                    let data = [...fromServer["data"], ...fromServer["searchLotTAT"], ...fromServer["dataProdTarget"]];
                    $hs.$("grid").data(data);

                    $hs.$("grid2").data(fromServer["searchLotTATDetail"]);

                    $hs.$("grid3").data(fromServer["searchProdTargetDetail"]);

                }).catch(e => $hs.errorBox(e))
            }
        },
        "btn_excel_download": {
            click : function() {
                // 엑셀 다운로드 (grid_id, file_name)
                // $hs.util.$CommonUtil.excelDownload("grid2", "plan_grid");

                $hs.util.$CommonUtil.excelDownloadPerGridSheet([
                    { gridId: "grid", title: "Summary"},
                    { gridId: "grid2", title: "Lead Time TAP"},
                    { gridId: "grid3", title: "생산목표 TAP"}
                ], "실적지표_통합");
            }
        },
        "btn_grid_setting" : {  // dimension 세팅
            click : function() {
                // 그리드 세팅 modal open
                // param : modal_id, grid_id, dimension_grid_id
                $hs.util.$CommonUtil.openGridSettingModal("modalDialog", "grid2", "dimension_grid");
            }
        },
        "btnSave_dimension" : { // dimension 변경내용 저장
            click : function() {
                $hs.util.$CommonUtil.saveGridSetting("modalDialog", "grid2", "dimension_grid", defaultColumns);
            }
        },
        "grid2" : {
            contextHeaderClick: function (data) {
                $hs.util.$CommonUtil.getHeaderContextClick(data);
            },
            headerFormat: function (data) {
                data.cell.css("text-align", "center");
            }
        },
        "grid" : {
            contextHeaderClick: function (data) {
                $hs.util.$CommonUtil.getHeaderContextClick(data);
            },
            headerFormat: function (data) {
                if (data.dataField == "ACTUAL") {
                    data.cell.css("color", "blue");
                }
                data.cell.css("text-align", "center");
            },
        },
    }

    $hs.load(() => {
        // 현재 localStorage에 저장된 메뉴 ID 가져옴
        var curMenuId = localStorage.getItem("curMenuId"); 
        // 즐겨찾기 여부 체크 후 버튼 리스너 추가
        $hs.util.$CommonUtil.checkFavorite(curMenuId);

        // search
        $hs.ui.button.init({ id: "btnSearch", class: ["smart-btn", "btn-search"] });

        // excel download
        $hs.ui.button.init({ id: "btn_excel_download"});
          
        // panel
        $hs.html.panel.init({ id: "pnlSearch" });

        // grid setting
        $hs.ui.button.init({ id: "btnSave_dimension"});

        // grid2
        $hs.dx.grid.init({
            id: "grid2",
            // width: "100%",
            height: "100%",
            sortable: true,
            selectMode: "single",
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
            reOrdering: true, // 컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        })
        

        // 그리드 컬럼가져오기
        // 1. id로 사용할 grid_id(js용)
        // 2. 초기화용 컬럼들 (LIST)
        // <div id="grid2" data-grid-id="RESOURCE_GRID"></div>
        $hs.util.$CommonUtil.getGridSetting("grid2", defaultColumns);
        
        const _instance = $hs.$("grid2")._instance;
        // 컬럼 라인 그리기
        _instance.option('showColumnLines', true);
        _instance.option('rowAlternationEnabled', false);
        _instance.option('showBorders', true);
        _instance.option('scrolling', {
            showScrollbar: 'always',
            useNative: true
        });

        const gridInstance = $hs.$("grid2")._instance;

        gridInstance.getScrollable().on("scroll", function() {
            mergeCellsByFields(["CATEGORY_LEVEL1"], gridInstance);
        });
        gridInstance.option("onContentReady", function(e) {
            mergeCellsByFields(["CATEGORY_LEVEL1"], gridInstance);
        });

        // grid3
        $hs.dx.grid.init({
            id: "grid3",
            // width: "100%",
            height: "100%",
            sortable: true,
            selectMode: "single",
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
            reOrdering: true, // 컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        })


        // 그리드 컬럼가져오기
        // 1. id로 사용할 grid_id(js용)
        // 2. 초기화용 컬럼들 (LIST)
        // <div id="grid2" data-grid-id="RESOURCE_GRID"></div>
        $hs.util.$CommonUtil.getGridSetting("grid3", defaultColumns2);

        const _instance3 = $hs.$("grid3")._instance;
        // 컬럼 라인 그리기
        _instance3.option('showColumnLines', true);
        _instance3.option('rowAlternationEnabled', false);
        _instance3.option('showBorders', true);
        _instance3.option('scrolling', {
            showScrollbar: 'always',
            useNative: true
        });

        const gridInstance3 = $hs.$("grid3")._instance;

        gridInstance3.getScrollable().on("scroll", function() {
            mergeCellsByFields(["CATEGORY_LEVEL1"], gridInstance3);
        });

        gridInstance3.option("onContentReady", function(e) {
            mergeCellsByFields(["CATEGORY_LEVEL1"], gridInstance3);
        });

        // grid
        $hs.dx.grid.init({
            id: "grid",
            // width: "60%",
            height: "100%",
            sortable: true,
            selectMode: "single",
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
            reOrdering: true, //컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        }).columns(col => {
            col.add({ dataField: "DIVISION_ID", label: "GROUP", width: 100, editable: false, align:"center"})
            col.add({ dataField: "TYPE2", label: "항목", width: 150, editable: false })
            col.add({ dataField: "TYPE3", label: "구분", width: 150, editable: false })
            col.add({ dataField: "OTD_RATE", label: "지표값", width: 150, editable: false, type:"number", precision:1 })
        });

        const _instance2 = $hs.$("grid")._instance;
        // 컬럼 라인 그리기
        _instance2.option('showColumnLines', true);
        _instance2.option('rowAlternationEnabled', false);
        _instance2.option('showBorders', true);
        _instance2.option('scrolling', {
            showScrollbar: 'always',
            useNative: true
        });

        _instance2.getScrollable().on("scroll", function() {
            mergeCellsByFields(["DIVISION_ID", "TYPE1", "TYPE2"], _instance2);
        });

        _instance2.option("onContentReady", function(e) {
            mergeCellsByFields(["DIVISION_ID", "TYPE1", "TYPE2"], _instance2);
        });

        // demension grid
        $hs.dx.grid.init({
            id: "dimension_grid",
            width: "100%",
            height: "300px",
            sortable: true,
            selectMode: "single",
            dragRow: true,
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
        }).columns(col => {
            col.add({ dataField: "dataField", label: "dataField", width: 200, editable: false, visible:false })
            col.add({ dataField: "editable", label: "editable", width: 200, editable: false, visible:false })
            col.add({ dataField: "name", label: "NAME", width: 200, editable: false })
            col.add({ dataField: "visible", label: "VISIBLE", width: 80, editable: true, type: "boolean" })
            col.add({ dataField: "width", label: "WIDTH", width: 80, editable: true })
            col.add({ dataField: "fix", label: "FIX", width: 80, editable: true, type: "boolean" })
        });


        $hs.html.select.init({
            id: "plan_id",
            dataurl: "/api/data/PLAN_ID",
            valueMember: "PLAN_ID",
            displayMember: "PLAN_ID",
            val: first_plan_id
        });





        // 팝업
        $hs.html.$popup.init('modalDialog');


        // tab
        $hs.dx.tabs.init({
            id : "tabs" ,
            width : "500px",
            items : [
                { text: "Lead Time"},
                { text: "생산목표"},
            ]
        });

        const tabsInstance = $("#tabs").dxTabs("instance");
        tabsInstance.option("selectedIndex", 0); // 첫 번째 탭 선택


        // console.log(tabsInstance); 어떤 객체가 반환되는지 확인
        // const dxTabsInstance = $("#tabs").dxTabs("instance");
        // console.log(dxTabsInstance); 모든 옵션과 메서드 확인 가능

        // 사업부
        $hs.html.select.init({
            id: "group_id",
            dataurl: "/api/data/DIVISION_LIST_NOT_IN_ALL",
            valueMember: "CODE",
            displayMember: "NAME",
            val: "SPS"
        });

        $hs.html.input.initAll();

        function mergeCellsByFields(fields, instance) {
            const rows = instance.getVisibleRows();
            const columns = instance.getVisibleColumns();

            // 먼저 기존 병합 상태 초기화
            for (let i = 0; i < rows.length; i++) {
                fields.forEach(fieldName => {
                    const columnIndex = columns.findIndex(col => col.dataField === fieldName);
                    const cell = instance.getCellElement(i, columnIndex);
                    if (cell && cell.length) {
                        // display, rowspan 초기화
                        cell[0].style.display = '';
                        cell[0].removeAttribute('rowSpan');
                    }
                });
            }

            // 본격 병합 로직
            fields.forEach(fieldName => {
                const columnIndex = columns.findIndex(col => col.dataField === fieldName);

                let prevValue = null;
                let startRowIndex = 0;
                let spanCount = 1;

                for (let i = 0; i < rows.length; i++) {
                    const currentValue = rows[i].data[fieldName];

                    if (currentValue === prevValue) {
                        spanCount++;
                        const cell = instance.getCellElement(i, columnIndex);
                        if (cell && cell.length) {
                            cell[0].style.display = 'none';
                        }
                    } else {
                        // 이전 그룹 병합 처리
                        if (spanCount > 1) {
                            const topCell = instance.getCellElement(startRowIndex, columnIndex);
                            if (topCell && topCell.length) {
                                topCell[0].rowSpan = spanCount;
                                topCell[0].style.verticalAlign = 'middle';
                            }
                        }

                        // 새 그룹 시작
                        prevValue = currentValue;
                        startRowIndex = i;
                        spanCount = 1;
                    }
                }

                // 마지막 그룹 병합 처리
                if (spanCount > 1) {
                    const topCell = instance.getCellElement(startRowIndex, columnIndex);
                    if (topCell && topCell.length) {
                        topCell[0].rowSpan = spanCount;
                        topCell[0].style.verticalAlign = 'middle';
                    }
                }
            });
        }
    });

</script>

<!-- s:Content Header (Page header) -->
<div class="content-header">
    <div class="header-location">
        <div class="header-title">
            <span class="sub-title">계획지표</span>
            <div class="toggle-container-favorites">
                <input type="checkbox" id="favorites-toggle" hidden>
                <label for="favorites-toggle" class="favorites-toggle">
                    <i class="bx bx-star"></i>
                </label>
            </div>
        </div>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#link"><i class="xi-ico xi-home"></i></a></li>
            <li class="breadcrumb-item active">PLAN ANALYSIS</li>
            <li class="breadcrumb-item active">계획지표</li>
        </ol>
    </div>
    <div class="header-setting">
        <div class="header-btn">
            <div class="filter-toggle-container">
                <span class="toggle-title">Search Area</span>
                <input type="checkbox" id="favorites-toggle-switch" hidden checked>
                <label for="favorites-toggle-switch" class="switch"></label>
            </div>
        </div>
    </div>
</div>
<!-- /e:Content Header -->
<hr>
<!-- s:content -->
<section class="content-body" flex>
    <div class="content row" flex>
        <div class="col-lg-12" flex>
            <div class="content-box content-filter">
                <div class="box-body">
                    <div class="list-filter">
                        <div id="pnlSearch" class="filter-content form-inline">

                            <div class="form-group">
                                <div class="control-label"><label>GROUP</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="group_id" hs-df="group_id"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>PLAN ID</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="plan_id" hs-df="PLAN_ID" hs-handler="true"></select>
                                </div>
                            </div>

                            <button type="button" class="btn btn-reset-icon"><span class="blind">filter reset</span></button>
                            <button id="btnSearch" type="button" class="btn btn-search-icon">Search<span class="blind">filter search</span></button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="content-box" flex>
                <!-- 헤더부분 정의-->
                <div class="box-header"> 
                    <div class="header-title">Summary</div> 
                    <div class="header-btn"> 
                        @* <button id="btn_save_actual" type="button" class="btn btn-save" hs-btn>save</button> *@
                        <button id="btn_excel_download" type="button" class="btn btn-download" hs-btn>excel</button>
                    </div> 
                </div> 
                <!-- 바디부분 정의--> 
                <div class="box-body" > 
                    <div class="grid-container" > 
                        <div id="grid" data-grid-id="plan_grid"></div> 
                    </div> 
                </div> 
                
                <!-- 헤더부분 정의-->
                @* <div class="box-header"> *@
                    @* <div class="header-title">실적지표<span class="title-list-count"><small id="total_cnt"></small></span></div> *@
                    @* <div class="header-btn"> *@
                        @* <button id="btn_excel_download" type="button" class="btn btn-download">excel</button> *@
                    @* </div> *@
                @* </div> *@
                <div id="tabs"></div> @* 탭 컨테이너(탭만 추가 된다) *@
                <div hs-tabs-id="tabs" flex>
                    <div class="grid-container" flex>
                        <div id="grid2" data-grid-id="plan_grid2"></div>
                    </div>
                    <div class="grid-container" flex>
                        <div id="grid3" data-grid-id="plan_grid3"></div>
                    </div>
                </div>

                @* <div class="row"> *@
                @*     <div class="col-md-6" style="margin-bottom: 0;"> *@
                @*         Lead Time *@
                @*     </div> *@
                @*     <div class="col-md-6" style="margin-bottom: 0;"> *@
                @*         생산목표 *@
                @*     </div> *@
                @* </div> *@

                @* <div class="row" flex_row> *@
                @*     <div class="col-md-6" flex> *@
                @*         <div id="grid2" data-grid-id="plan_grid2"></div> *@
                @*     </div> *@
                @*     <div class="col-md-6" flex> *@
                @*         <div id="grid3" data-grid-id="plan_grid3"></div> *@
                @*     </div> *@
                @* </div> *@

            </div>
        </div>
    </div>
</section>
<!-- /e:content -->
<!-- s:modal -->
<div id="modalDialog" style="display:none; position:absolute; height:400px;width:600px;">
    <div class="modal-content animate-top">
        <div id="modal-header" class="modal-header">
            <h5 class="modal-title">PERSONALIZATION</h5>
            <button type="button" class="btn-popup-close">
                <span class="xi-close-min" aria-hidden="true"></span>
            </button>
        </div>
        <div class="modal-body" id="panel_input">
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label"><label>Dimension</label></div>
                    </div>
                </div>
            </div>
            <div class="grid-container" flex>
                <div id="dimension_grid"></div>
            </div>
        </div>
        <div class="modal-footer">
            <button id="btnSave_dimension" type="button" class="btn btn-save">저장</button>
            <button type="button" class="btn btn-close btn-popup-close">닫기</button>
        </div>
    </div>
</div>
<!-- /e:modal -->