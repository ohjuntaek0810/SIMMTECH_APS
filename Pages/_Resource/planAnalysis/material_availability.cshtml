@page
@model HS.Web.Pages.material_availability
@{
    string CLIENT = Model.Params["CLIENT"].AsString();
    string R = Model.Params["R"].AsString();
    string W = Model.Params["W"].AsString();
}


<script>

    // 헤더컬럼 초기값 정의
    const defaultColumns = [
        { dataField: "COMPONET_ITEM_CODE", label: "자재코드", width: 100, editable: false},
        { dataField: "COMPONENT_ITEM", label: "자재명", width: 400, editable: false },
        { dataField: "확정수량", label: "확정수량", width: 100, editable: false, type:"number"}, 
        { dataField: "과부족", label: "과부족", width: 100, editable: false, type:"number" },
        { dataField: "INVENTORY", label: "INVENTORY", width: 130, editable: false, type:"number" },
        { dataField: "미입", label: "미입", width: 80, editable: false, type:"number" },
        { dataField: "입고 후 과부족", label: "입고 후 과부족", width: 100, editable: false, type:"number" },
        { dataField: "샘플 자재 안전재고", label: "샘플 자재 안전재고", width: 125, editable: false, type:"number"},
        { dataField: "SCHEDULE", label: "미입 일정", width: 200, editable: false },
        { dataField: "REMARK", label: "Remark", width: 100, editable: true }

    ];

    $hs.handler = {
        "btn_reset" : {
            click: function() {
                // 값 초기화
                $hs.$("pnlSearch").reset();
            }
        },
        "btnSearch": {
            click: function () {

                let toServer = {};
                toServer["terms"] = $hs.$("pnlSearch").val();

                $hs.fetch({
                    command: "search",
                    param: toServer
                }).then(fromServer => {
                    $hs.$("grid").data(fromServer["data"]);
                    $('#total_cnt').text('(Total Count:' + fromServer["data"].length + ')');

                    $('#file_name').val(fromServer["fileName"][0].FILE_NAME);
                }).catch(e => $hs.errorBox(e))
            }
        },
        "btn_grid_save": {
            click: function () {
                let updated_data = [];
                // 클릭 이력으로 수정 or 입력여부 체크
                $hs.$("grid").data().forEach(item => {
                    if(item.$rowChecked == false ) {
                        updated_data.push(item);
                    }
                });

                let toServer = {};
                toServer["data"] = updated_data;

                if(toServer["data"].length == 0) {
                    alert("변경된 데이터가 없습니다.");
                }

                $hs.fetch({
                    command: "save",
                    param: toServer
                }).then(fromServer => {
                    alert("저장되었습니다."); 
                    $hs.handler["btnSearch"].click();
                }).catch(e => $hs.errorBox(e))
            },
        },
        "btn_excel_download": {
            click : function() {
                $hs.util.$CommonUtil.excelDownload("grid", "자재가용성");
            }
        },
        "btn_excel_download_detail" : {
            click : function() {
                $hs.util.$CommonUtil.excelDownload("grid2", "자재가용성_상세");
            }
        },
        "btn_grid_setting" : {  // dimension 세팅
            click : function() {
                // 그리드 세팅 modal open
                // param : modal_id, grid_id, dimension_grid_id
                $hs.util.$CommonUtil.openGridSettingModal("modalDialog", "grid", "dimension_grid");
            }
        },
        "btnSave_dimension" : { // dimension 변경내용 저장
            click : function() {
                $hs.util.$CommonUtil.saveGridSetting("modalDialog", "grid", "dimension_grid", defaultColumns);

                
            }
        },
        "grid" : {
            contextHeaderClick: function (data) {
                $hs.util.$CommonUtil.getHeaderContextClick(data);
            },
            headerFormat: function (data) {
                if (data.dataField == "Remark") {
                    data.cell.css("color", "blue");
                }
                data.cell.css("text-align", "center");
            },
            cellDoubleClick: function(data) {
                let toServer = {};
                toServer["terms"] = data.rowData;

                $hs.fetch({
                    command: "search_detail",
                    param: toServer
                }).then(fromServer => {
                    $('#detail_title').text(data.rowData.COMPONENT_ITEM);

                    $hs.$("grid2").data(fromServer["data"]);
                    $hs.$('modalDialog2').open();
                }).catch(e => $hs.errorBox(e))
            }
        },
    }

    $hs.load(() => {
        // 현재 localStorage에 저장된 메뉴 ID 가져옴
        var curMenuId = localStorage.getItem("curMenuId"); 
        // 즐겨찾기 여부 체크 후 버튼 리스너 추가
        $hs.util.$CommonUtil.checkFavorite(curMenuId);

        // search
        $hs.ui.button.init({ id: "btnSearch", class: ["smart-btn", "btn-search"] });

        // grid save
        $hs.ui.button.init({ id: "btn_grid_save", enabled: @W });

        // excel download
        $hs.ui.button.init({ id: "btn_excel_download"});
          
        // panel
        $hs.html.panel.init({ id: "pnlSearch" });

        // grid setting
        $hs.ui.button.init({ id: "btn_grid_setting"});
        $hs.ui.button.init({ id: "btnSave_dimension"});

        // grid
        $hs.dx.grid.init({
            id: "grid",
            width: "100%",
            height: "100%",
            sortable: true,
            selectMode: "single",
            rownumber: false,
            filterable: true,
            editable: true,
            handler: true,
            reOrdering: true, // 컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        })

        // 그리드 컬럼가져오기
        // 1. id로 사용할 grid_id(js용)
        // 2. 초기화용 컬럼들 (LIST)
        // <div id="grid" data-grid-id="RESOURCE_GRID"></div>
        $hs.util.$CommonUtil.getGridSetting("grid", defaultColumns);

        const _instance = $hs.$("grid")._instance;
        // 컬럼 라인 그리기
        _instance.option('showColumnLines', true);
        _instance.option('rowAlternationEnabled', false);
        _instance.option('showBorders', true);
        _instance.option('scrolling', {
            showScrollbar: 'always',
            useNative: true
        });

        // demension grid
        $hs.dx.grid.init({
            id: "dimension_grid",
            width: "100%",
            height: "300px",
            sortable: true,
            selectMode: "single",
            dragRow: true,
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
        }).columns(col => {
            col.add({ dataField: "dataField", label: "dataField", width: 200, editable: false, visible:false })
            col.add({ dataField: "editable", label: "editable", width: 200, editable: false, visible:false })
            col.add({ dataField: "name", label: "NAME", width: 200, editable: false })
            col.add({ dataField: "visible", label: "VISIBLE", width: 80, editable: true, type: "boolean" })
            col.add({ dataField: "width", label: "WIDTH", width: 80, editable: true })
            col.add({ dataField: "fix", label: "FIX", width: 80, editable: true, type: "boolean" })
        });

        // grid2
        $hs.dx.grid.init({
            id: "grid2",
            width: "100%",
            height: "300px",
            sortable: true,
            selectMode: "single",
            rownumber: false,
            filterable: true,
            editable: false,
            handler: true,
        }).columns(col => {
            col.add({ dataField: "COMPONET_ITEM_CODE", label: "자재코드", width: 120, editable: false })
            col.add({ dataField: "ASSEMBLY_ITEM_CODE", label: "ITEM CODE", width: 120, editable: false })
            col.add({ dataField: "CUSTOMER_NAME", label: "CUSTOMER", width: 120, editable: false })
            col.add({ dataField: "MODEL_NAME", label: "MODEL NAME", width: 300, editable: false})
            col.add({ dataField: "EXTENDED_QUANTITY", label: "확정수량", width: 150, editable: false, type:"number" })
            col.add({ dataField: "LAYER", label: "LAYER", width: 80, editable: false,  })
            col.add({ dataField: "PATTERN", label: "MSAP_FILL", width: 80, editable: false,  })
        });

        const gridInstance = $hs.$("grid2")._instance;

        function mergeCellsByFields(fields) {
            const rows = gridInstance.getVisibleRows();
            const columns = gridInstance.getVisibleColumns();

            // 먼저 기존 병합 상태 초기화
            for (let i = 0; i < rows.length; i++) {
                fields.forEach(fieldName => {
                    const columnIndex = columns.findIndex(col => col.dataField === fieldName);
                    const cell = gridInstance.getCellElement(i, columnIndex);
                    if (cell && cell.length) {
                        // display, rowspan 초기화
                        cell[0].style.display = '';
                        cell[0].removeAttribute('rowSpan');
                    }
                });
            }

            // 본격 병합 로직
            fields.forEach(fieldName => {
                const columnIndex = columns.findIndex(col => col.dataField === fieldName);

                let prevValue = null;
                let startRowIndex = 0;
                let spanCount = 1;

                for (let i = 0; i < rows.length; i++) {
                    const currentValue = rows[i].data[fieldName];

                    if (currentValue === prevValue) {
                        spanCount++;
                        const cell = gridInstance.getCellElement(i, columnIndex);
                        if (cell && cell.length) {
                            cell[0].style.display = 'none';
                        }
                    } else {
                        // 이전 그룹 병합 처리
                        if (spanCount > 1) {
                            const topCell = gridInstance.getCellElement(startRowIndex, columnIndex);
                            if (topCell && topCell.length) {
                                topCell[0].rowSpan = spanCount;
                                topCell[0].style.verticalAlign = 'middle';
                            }
                        }

                        // 새 그룹 시작
                        prevValue = currentValue;
                        startRowIndex = i;
                        spanCount = 1;
                    }
                }

                // 마지막 그룹 병합 처리
                if (spanCount > 1) {
                    const topCell = gridInstance.getCellElement(startRowIndex, columnIndex);
                    if (topCell && topCell.length) {
                        topCell[0].rowSpan = spanCount;
                        topCell[0].style.verticalAlign = 'middle';
                    }
                }
            });
        }

        gridInstance.getScrollable().on("scroll", function() {
            mergeCellsByFields(["COMPONET_ITEM_CODE"]);
        });


        // gridInstance.option("scrolling.mode", "standard");
        gridInstance.option("onContentReady", function(e) {
            mergeCellsByFields(["COMPONET_ITEM_CODE"]);
        });

        const _instance2 = $hs.$("grid2")._instance;
        // 컬럼 라인 그리기
        _instance2.option('showColumnLines', true);
        _instance2.option('rowAlternationEnabled', false);
        _instance2.option('showBorders', true);
        _instance2.option('scrolling', {
            showScrollbar: 'always',
            useNative: true
        });
        
        // 팝업
        $hs.html.$popup.init('modalDialog');
        $hs.html.$popup.init('modalDialog2');

        // 사업부
        $hs.html.select.init({
            id: "group_id",
            dataurl: "/api/data/DIVISION_LIST",
            valueMember: "CODE",
            displayMember: "NAME",
            val: ""
        });

        $hs.html.input.initAll();
    });

</script>

<!-- s:Content Header (Page header) -->
<div class="content-header">
    <div class="header-location">
        <div class="header-title">
            <span class="sub-title">자재 가용성 분석</span>
            <div class="toggle-container-favorites">
                <input type="checkbox" id="favorites-toggle" hidden>
                <label for="favorites-toggle" class="favorites-toggle">
                    <i class="bx bx-star"></i>
                </label>
            </div>
        </div>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#link"><i class="xi-ico xi-home"></i></a></li>
            <li class="breadcrumb-item active">PLAN ANALYSIS</li>
            <li class="breadcrumb-item active">자재 가용성 분석</li>
        </ol>
    </div>
    <div class="header-setting">
        <div class="header-btn">
            <div class="filter-toggle-container">
                <span class="toggle-title">Search Area</span>
                <input type="checkbox" id="favorites-toggle-switch" hidden checked>
                <label for="favorites-toggle-switch" class="switch"></label>
            </div>
        </div>
    </div>
</div>
<!-- /e:Content Header -->
<hr>
<!-- s:content -->
<section class="content-body" flex>
    <div class="content row" flex>
        <div class="col-lg-12" flex>
            <div class="content-box content-filter">
                <div class="box-body">
                    <div class="list-filter">
                        <div id="pnlSearch" class="filter-content form-inline">

                            <div class="form-group">
                                <div class="control-label"><label>GROUP</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="group_id" hs-df="group_id" hs-handler="true"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>자재코드</label></div>
                                <div class="control-form">
                                    <input type="text" id="componet_item_code" hs-df="componet_item_code" class="form-control" placeholder="Search">
                                </div>
                            </div>

                            <button id="btn_reset" type="button" class="btn btn-reset-icon" hs-btn><span class="blind">filter reset</span></button>
                            <button id="btnSearch" type="button" class="btn btn-search-icon">Search<span class="blind">filter search</span></button>

                            <div class="form-group">
                                <div class="control-label"><label>투입대기 자재 업로드 파일명</label></div>
                                <div class="control-form">
                                    <input type="text" id="file_name" hs-df="file_name" class="form-control" style="width: 300px;">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="content-box" flex>
                <!-- 헤더부분 정의-->
                <div class="box-header">
                    <div class="header-title">
                        자재 가용성 분석 정보
                        <span class="title-list-count">
                            <small id="total_cnt"></small><small id="grid_cal" class="" style="color: black;margin-left: 10px;font-weight: 500;"></small>
                        </span>
                    </div>
                    <div class="header-btn">
                        <button id="btn_grid_save" type="button" class="btn btn-save">save</button> 
                        <button id="btn_excel_download" type="button" class="btn btn-download">excel</button>
                        <button id="btn_grid_setting" type="button" class="btn btn-setting-icon"><span class="blind">setting</span></button>
                    </div>
                </div>
                <!-- 바디부분 정의-->
                <div class="box-body" flex>
                    <div class="grid-container" flex>
                        <div id="grid" data-grid-id="MATERIAL_AVAILABILITY"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- /e:content -->
<!-- s:modal -->
<div id="modalDialog" style="display:none; position:absolute; height:800px;width:1200px;">
    <div class="modal-content animate-top" style="height: 600px;">
        <div id="modal-header" class="modal-header">
            <h5 class="modal-title">PERSONALIZATION</h5>
            <button type="button" class="btn-popup-close">
                <span class="xi-close-min" aria-hidden="true"></span>
            </button>
        </div>
        <div class="modal-body" id="panel_input">
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label"><label>Dimension</label></div>
                    </div>
                </div>
            </div>
            <div class="grid-container" flex>
                <div id="dimension_grid"></div>
            </div>
        </div>
        <div class="modal-footer">
            <button id="btnSave_dimension" type="button" class="btn btn-save">저장</button>
            <button type="button" class="btn btn-close btn-popup-close">닫기</button>
        </div>
    </div>
</div>
<!-- /e:modal -->
<!-- s:modal2 -->
<div id="modalDialog2" style="display:none; position:absolute; height:1200px;width:1200px;">
    <div class="modal-content animate-top">
        <div id="modal-header" class="modal-header">
            <h5 class="modal-title" id="detail_title"></h5>
            <button type="button" class="btn-popup-close">
                <span class="xi-close-min" aria-hidden="true"></span>
            </button>
        </div>
        <div class="modal-body" id="panel_input">
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group" style="display:flex">
                        <div class="control-label"><label>ITEM 별 확정수량</label></div>
                        <button id="btn_excel_download_detail" style="margin-left:auto" type="button" class="btn btn-download" hs-btn>excel</button>
                    </div>
                </div>
            </div>
            <div class="grid-container" flex>
                <div id="grid2"></div>
            </div>
        </div>
    </div>
</div>
<!-- /e:modal -->