@page
@model HS.Web.Pages.input_plan_simul
@{
    string CLIENT = Model.Params["CLIENT"].AsString();
    string R = Model.Params["R"].AsString();
    string W = Model.Params["W"].AsString();
    string first_plan_id = Model.Params["first_plan_id"].AsString();
}


<script>
    let cur_version = "";
    let cur_aps_plancur_version = "";
    let first_plan_id = '@first_plan_id';

    // 헤더컬럼 초기값 정의
    const defaultColumns = [
        // { dataField: "BUTTON_TEXT", label: "선택" , type: "check", width: 80, align:"center", editable: true },
        { dataField: "ORDER_DATE", label: "ORDER DATE", width: 100, editable: false, type: "date" },
        { dataField: "CUST_NAME", label: "Cust Name", width: 100, editable: false},
        { dataField: "CUSTOMER_NUMBER", label: "Cust Num", width: 100, editable: false },
        { dataField: "SHIP_TO", label: "Ship TO CUSTOMER", width: 150, editable: false},
        { dataField: "END_CUST", label: "END Customer", width: 120, editable: false},
        { dataField: "BOOKED_FLAG", label: "부킹여부", width: 70, editable: false},
        { dataField: "ITEM_CODE", label: "Item Code", width: 120, editable: false},
        { dataField: "MODEL_NAME", label: "MODEL", width: 200, editable: false},
        { dataField: "SO_NUMBER", label: "세일즈 오더(임시)", width: 90, editable: false},
        { dataField: "SCHEDULE_LINE_ID", label: "LINE(임시)", width: 80, editable: false },
        { dataField: "SCHEDULE_LINE_SEQ", label: "LINE_SEQ", width: 90, editable: false },
        { dataField: "STD_LEAD_TIME", label: "표준 LT", width: 140, editable: false, type:"number"},
        { dataField: "ATP_LEAD_TIME", label: "ATP LT", width: 85, editable: false, type:"number" },
        { dataField: "APS_LEAD_TIME", label: "APS 기준LT", width: 150, editable: false, type:"number" },
        { dataField: "STD_LT_INPUT_DATE", label: "표준 L/T 기준 투입일", width: 140, editable: false, type: "date" },
        { dataField: "ATP_LT_INPUT_DATE", label: "ATP L/T 기준 투입일", width: 140, editable: false, type: "date" },
        { dataField: "NEW_DATE", label: "납기", width: 130, editable: false, type: "date"},
        { dataField: "WAITING_DAYS", label: "투입대기 연령", width: 140, editable: false, type:"number" },
        { dataField: "READY_BY_INPUT_PNL_QTY", label: "투입대기수량(PNL)", width: 140, editable: false, type:"number" },
        { dataField: "READY_BY_INPUT_SQM_QTY", label: "투입대기수량(SQM)", width: 140, editable: false, type:"number" },
        { dataField: "READY_BY_INPUT_PCS_QTY", label: "투입대기수량(PCS)", width: 140, editable: false, type:"number" },
        { dataField: "APS_PLAN_INPUT_DATE", label: "APS 투입 계획", width: 140, editable: false, type:"date" },
        { dataField: "APS_PLAN_INPUT_DATE_INPUT_QTY", label: "APS 투입 실수량", width: 140, editable: false, type:"number" },
        
        { dataField: "INPUT_PNL_QTY", label: "투입계획수량(PNL)", width: 160, editable: true, type: "number" },
        { dataField: "SQM_PER_PNL", label: "투입계획수량(SQM)", width: 160, editable: false, type: "number"},
        { dataField: "PRC_PER_PNL", label: "투입계획수량(PCS)", width: 160, editable: false, type: "number"},

        { dataField: "SQM_PER_PNL_RATIO", label: "투입계획수량(SQM)", width: 160, editable: false, visible:false, type:"number" },
        { dataField: "PCS_PER_PNL_RATIO", label: "투입계획수량(PCS)", width: 160, editable: false, visible:false, type:"number" },

        { dataField: "NEW_START_DATE", label: "투입일자", width: 160, editable: true, type: "date" },
        { dataField: "CCL_EXPIRATION_DATE", label: "CCL유효기간", width: 160, editable: false, type: "date"  },
        { dataField: "CCL_EXPIRATION_DAYS", label: "CCL_EXPIRATION_DAYS", width: 160, editable: false, type:"number" },
        { dataField: "PPG_EXPIRTATION_DATE", label: "PPG유효기간", width: 160, editable: false, type:"date" },
        { dataField: "PPG_EXPIRATION_DAY", label: "PPG_EXPIRATION_DAYS", width: 160, editable: false, type:"number" },
        { dataField: "BBT_YN", label: "BBT 여부", width: 160, editable: false },
        { dataField: "BBT_JIG_CAPA", label: "BBT JIG CAPA(KPCS)", width: 160, editable: false },
        { dataField: "LOT_SIZE", label: "1 LOT SIZE", width: 160, editable: false },
        { dataField: "SHRINKAGE_RATE", label: "쉬링", width: 160, editable: false, type:"number", precision:3 }

    ];

    $hs.handler = {
        "btn_reset" : {
            click: function() {
                // 값 초기화
                $hs.$("pnlSearch").reset();
            }
        },
        "btn_add" : {
            click: function() {
                let toServer = {};
                toServer["terms"] = $hs.$("pnlSearch").val();
                // toServer["terms"]["plan_id"] = $hs.$("PLAN_ID").val();

               

                $hs.fetch({
                    command: "new_version",
                    param: toServer
                }).then(fromServer => {
                    $hs.$("modal_plan_id").close();
                    $hs.handler["btnSearch"].click();
                }).catch(e => $hs.errorBox(e))

                // $hs.$("modal_plan_id").open();
            }
        },
        "btnSave_plan_id": {
            click: function() {
                let toServer = {};
                toServer["terms"] = $hs.$("pnlSearch").val();
                toServer["terms"]["plan_id"] = $hs.$("PLAN_ID").val();
                toServer["terms"]["INPUT_PLAN_VERSION"] =  cur_version;

                

                $hs.fetch({
                    command: "update_plan_id",
                    param: toServer
                }).then(fromServer => {
                    $hs.$("modal_plan_id").close();
                    $hs.handler["btnSearch"].click();
                }).catch(e => $hs.errorBox(e))
            }
        },
        "btn_add_plan" : {
            click: function() {
                const grid = $("#grid").dxDataGrid("instance");
                const selectedRowData = grid.getSelectedRowsData()[0];
                const selectedRowKey = grid.getSelectedRowKeys()[0];

                if (!selectedRowData) {
                    alert("행을 선택해주세요.");
                    return;
                }

                const ds = grid.option("dataSource");

                // const rowIndex = grid.getRowIndexByKey(selectedRowKey);
                const rowIndex = ds.findIndex(row => row._key === selectedRowKey);



                //console.log('rowIndex = ', rowIndex);
                //console.log('selectedRowKey = ', selectedRowKey);

                const newRow = JSON.parse(JSON.stringify(selectedRowData));
                newRow._key = Date.now();
                newRow.INPUT_PNL_QTY = null;
                newRow.SQM_PER_PNL = null;
                newRow.PRC_PER_PNL = null;
                newRow.SCHEDULE_LINE_SEQ = newRow.SCHEDULE_LINE_SEQ + 1;
                // 신규 row 구분하기 위함
                newRow.isNew = true;


                ds.splice(rowIndex + 1, 0, newRow);

                // LINE에 SEQ + 1
                // 수량이랑 날짜는 비워두기

                grid.option("dataSource", ds);

                // 포커스를 새로 추가된 행으로 이동
                const newKey = newRow._key;
                setTimeout(() => {
                    grid.selectRows([newRow._key], false);
                    //console.log(selectedRowData);
                    //console.log(selectedRowKey);
                }, 100);
                //grid.focus();
            }
        },
        "btn_grid_delete": {
            click: function () {
                let selData = $hs.$("grid").val();

                if (selData.length == 0) {
                    alert("삭제할 항목을 체크해 주세요.");
                    return;
                }

                if(confirm("선택한 항목을 삭제 하시겠습니까?")){
                    console.log(selData);
                    $hs.$("grid").delRow() // 체크한것 모두 삭제하기
                }

            },
         },
        "btnSearch": {
            click: function () {
                let toServer = {};
                toServer["terms"] = $hs.$("pnlSearch").val();

                $hs.fetch({
                    command: "search_version",
                    param: toServer
                }).then(fromServer => {
                    $hs.$("grid2").data(fromServer["data"]);

                    // $hs.$("grid").data([]);
                    // $('#total_cnt').text('');
                }).catch(e => $hs.errorBox(e))
            }
        },
        "btn_add_aps_input_date_update" : {
            click: function() {
                //console.log('프로시저 실행');
                let toServer = {};
                let terms = {};
                terms["INPUT_PLAN_VERSION"] =  cur_version;
                terms["APS_PLAN_ID"] =  cur_aps_plancur_version;

                toServer["terms"] = terms;

               // console.log(toServer);

                $hs.fetch({
                    command: "aps_input_date_update",
                    param: toServer
                }).then(fromServer => {
                    alert(fromServer["data"]);
                }).catch(e => $hs.errorBox(e))
            }
        },
        "btn_save": {
            click: function () {

                let toServer = {};
                toServer["data"] = $hs.$("grid").data();
                toServer["CUR_VERSION"] = cur_version;

                //console.log(toServer);

                $hs.fetch({
                    command: "save",
                    param: toServer
                }).then(fromServer => {
                    alert("저장되었습니다.");
                    $hs.handler["btnSearch"].click();
                }).catch(e => $hs.errorBox(e))
            },
        },
        "btn_excel_download": {
            click : function() {
                $hs.util.$CommonUtil.excelDownload("grid", "투입계획수립");
            }
        },
        "btn_excel_download_detail" : {
            click : function() {
                $hs.util.$CommonUtil.excelDownload("grid2", "투입계획수립_Summary");
            }
        },
        "btn_excel_download_summary" : {
            click : function() {
                $hs.util.$CommonUtil.excelDownload("grid2", "투입계획수립_Summary");
            }
        },
        "btn_grid_setting" : {  // dimension 세팅
            click : function() {
                // 그리드 세팅 modal open
                // param : modal_id, grid_id, dimension_grid_id
                $hs.util.$CommonUtil.openGridSettingModal("modalDialog", "grid", "dimension_grid");
            }
        },
        "btnSave_dimension" : { // dimension 변경내용 저장
            click : function() {
                $hs.util.$CommonUtil.saveGridSetting("modalDialog", "grid", "dimension_grid", defaultColumns);


            }
        },
        "grid" : {
            contextHeaderClick: function (data) {
                $hs.util.$CommonUtil.getHeaderContextClick(data);
            },
            headerFormat: function (data) {
                if (data.dataField == "INPUT_PNL_QTY") {
                    data.cell.css("color", "blue");
                }
                if (data.dataField == "NEW_START_DATE") {
                    data.cell.css("color", "blue");
                }

                data.cell.css("text-align", "center");
            },
            cellFormat: function (data) {
                if(data.rowData.isNew) {
                    data.cell.css("background-color", "#e8f5e9");
                }
            },
            cellValueChanged: function (data) {

                // data.$ : 컨트롤객체(그리드)
                // data.dataField : dataField
                // data.key : 현재 row key (행을 구분하는 유일키 값 -> 값이 변동되지 않음)
                // data.index : 현재 row index (행의 순서에 따라 값이 변동됨 -> 로우를 삭제했을경우)
                // data.rowData : 현재 row 데이타
                // data.oldValue : 이전 value
                // data.value : 변경 value
                if(data.dataField == "INPUT_PNL_QTY") {
                    // SQM_PER_PNL
                    // PRC_PER_PNL
                    //console.log(Number(data.value));
                    //console.log(Number(data.rowData.SQM_PER_PNL_RATIO));
                    //console.log(Number(data.value) * Number(data.rowData.SQM_PER_PNL_RATIO));

                    data.rowData.SQM_PER_PNL = Number(data.value) * Number(data.rowData.SQM_PER_PNL_RATIO);
                    data.rowData.PRC_PER_PNL = Number(data.value) * Number(data.rowData.PCS_PER_PNL_RATIO);

                    //console.log(data.rowData.SQM_PER_PNL);

                    // 그리드 인스턴스 가져오기
                    const grid = $("#grid").dxDataGrid("instance");

                    // 화면 갱신
                    // grid.refresh(); 또는 grid.repaint();
                    grid.cellValue(data.index, "SQM_PER_PNL", Number(data.value) * Number(data.rowData.SQM_PER_PNL_RATIO));
                    grid.cellValue(data.index, "PRC_PER_PNL", Number(data.value) * Number(data.rowData.PCS_PER_PNL_RATIO));

                    const today = new Date();
                    const dateOnly = new Date(today.getFullYear(), today.getMonth(), today.getDate());
                    grid.cellValue(data.index, "NEW_START_DATE", dateOnly);
                }
            },
            cellDoubleClick: function (data) {
                // if(data.dataField == "BUTTON_TEXT")
                // {
                    let rowData =  data.rowData;
                    let toServer = {};
                    toServer["rowterms"] = rowData;

                    $hs.fetch({
                        command: "search_inputstock",
                        param: toServer
                    }).then(fromServer => {
                        let DetailData = fromServer["DetailData"];
                        $hs.$("grid_inputstock").data(DetailData);

                    }).catch(e => $hs.errorBox(e))

                // }
            }



        },
        "grid2" : {
            contextHeaderClick: function (data) {
                $hs.util.$CommonUtil.getHeaderContextClick(data);
            },
            headerFormat: function (data) {
                if (data.dataField == "DESCRIPTION" || data.dataField == "APS_PLAN_ID") {
                    data.cell.css("color", "blue");
                }
                data.cell.css("text-align", "center");
            },
            cellClick: function (data) {
                //console.log(data);
                if (data.dataField= "APS_PLAN_ID") {
                    cur_version = data.rowData["VERSION"];
                    $hs.$("modal_plan_id").open();
                }
            },
            cellDoubleClick: function(data) {
                let toServer = {};
                data.rowData["group_id"] = $hs.$("group_id").val();
                toServer["terms"] = data.rowData;


                //console.log(toServer);


                cur_version = data.rowData["VERSION"];
                cur_aps_plancur_version = data.rowData["APS_PLAN_ID"];

                $hs.fetch({
                    command: "search",
                    param: toServer
                }).then(fromServer => {
                    $hs.$("grid").data(fromServer["data"]);
                    $('#total_cnt').text('(Total Count:' + fromServer["data"].length + ')');
                }).catch(e => $hs.errorBox(e))
            },
        },
    }

    $hs.load(() => {
        // 현재 localStorage에 저장된 메뉴 ID 가져옴
        var curMenuId = localStorage.getItem("curMenuId");
        // 즐겨찾기 여부 체크 후 버튼 리스너 추가
        $hs.util.$CommonUtil.checkFavorite(curMenuId);

        // search
        $hs.ui.button.init({ id: "btnSearch", class: ["smart-btn", "btn-search"] });

        // excel download
        $hs.ui.button.init({ id: "btn_excel_download"});

        // panel
        $hs.html.panel.init({ id: "pnlSearch" });

        // grid setting
        //$hs.ui.button.init({ id: "btn_grid_setting"});
        $hs.ui.button.init({ id: "btn_add", enabled: @W });
        $hs.ui.button.init({ id: "btn_save_actual", enabled: @W });

        $hs.ui.button.init({ id: "btn_save", enabled: @W });
        $hs.ui.button.init({ id: "btn_grid_delete", enabled: @W });
        $hs.ui.button.init({ id: "btn_add_plan", enabled: @W });
        $hs.ui.button.init({ id: "btn_add_aps_input_date_update", enabled: @W });



        $hs.ui.button.init({ id: "btnSave_dimension"});

        // grid
        $hs.dx.grid.init({
            id: "grid",
            // width: "100%",
           // height: "100%",
            height: "500px",
            sortable: true,
            selectMode: "multiple",
            rownumber: false,
            filterable: true,
            editable: true,
            handler: true,
            reOrdering: true, // 컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        })

        // 그리드 컬럼가져오기
        // 1. id로 사용할 grid_id(js용)
        // 2. 초기화용 컬럼들 (LIST)
        // <div id="grid" data-grid-id="RESOURCE_GRID"></div>
        $hs.util.$CommonUtil.getGridSetting("grid", defaultColumns);

        const _instance = $hs.$("grid")._instance;
        // 컬럼 라인 그리기
        _instance.option('showColumnLines', true);
        _instance.option('rowAlternationEnabled', false);
        _instance.option('showBorders', true);
        _instance.option('scrolling', {
            mode : "standard",
            showScrollbar: 'always',
            useNative: true
        });

        $hs.util.$CommonUtil.setExcelToGridPaste("grid");


        // demension grid
        $hs.dx.grid.init({
            id: "dimension_grid",
            width: "100%",
            height: "300px",
            sortable: true,
            selectMode: "single",
            dragRow: true,
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
        }).columns(col => {
            col.add({ dataField: "dataField", label: "dataField", width: 200, editable: false, visible:false })
            col.add({ dataField: "editable", label: "editable", width: 200, editable: false, visible:false })
            col.add({ dataField: "name", label: "NAME", width: 200, editable: false })
            col.add({ dataField: "visible", label: "VISIBLE", width: 80, editable: true, type: "boolean" })
            col.add({ dataField: "width", label: "WIDTH", width: 80, editable: true })
            col.add({ dataField: "fix", label: "FIX", width: 80, editable: true, type: "boolean" })
        });

        const zoomLevel = window.devicePixelRatio; // 예: 1.25, 1.5 등
       // const windowHeight = window.innerHeight * zoomLevel;
        const grid2_height = 50 * zoomLevel;

        // grid2
        $hs.dx.grid.init({
            id: "grid2",
            width: "100%",
           // height: "100%",
            height: "300px",
            sortable: true,
            selectMode: "single",
            rownumber: false,
            filterable: true,
            editable: true,
            handler: true,
        }).columns(col => {
            col.add({ dataField: "DIVISION_ID", label: "DIVISION_ID", width: 150, editable: false })
            col.add({ dataField: "VERSION", label: "VERSION", width: 150, editable: false })
            col.add({ dataField: "PLAN_DATE", label: "PLAN_DATE", width: 120, editable: false, type:"date" })
            col.add({ dataField: "REVISION", label: "REVISION", width: 80, editable: false})
            col.add({ dataField: "READY_BY_INPUT_VER", label: "READY_BY_INPUT_VER", width: 220, editable: false })
            col.add({ dataField: "APS_PLAN_ID", label: "APS_PLAN_ID", width: 160, editable: false,  })
            col.add({ dataField: "MAT_INVEN_CUTOFF_DATE", label: "MAT_INVEN_CUTOFF_DATE", width: 160, editable: false,  })
            col.add({ dataField: "MAT_INVEN_CUTOFF_REVISION", label: "MAT_INVEN_CUTOFF_REVISION", width: 160, editable: false,  })
            col.add({ dataField: "USE_YN", label: "USE_YN", width: 80, editable: false,  })
            col.add({ dataField: "DESCRIPTION", label: "DESCRIPTION", width: 160, editable: true,  })
        });

       const _instance2 = $hs.$("grid2")._instance;
        // 컬럼 라인 그리기
        _instance2.option('showColumnLines', true);
        _instance2.option('rowAlternationEnabled', false);
        _instance2.option('showBorders', true);
        _instance2.option('scrolling', {
            showScrollbar: 'always',
            useNative: true
        });



         // 디테일 그리드 초기화
        $hs.dx.grid.init({
            id: "grid_inputstock",
            width: "100%",
            height: "250px",
            sortable: true,
            selectMode: "multiple",
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
            reOrdering: false, // 컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        })
        .columns(col => {
            col.add({ dataField: "MATERIAL_ITEM_CODE", label: "소요 자재 코드",  width: 200, align:'center', editable: false, visible: true });
            col.add({ dataField: "MATERIAL_ITEM_NAME", label: "소요 자재", width: 200,  editable: false, visible: true });
            col.add({ dataField: "REQ_MATERIAL_QTY", label: "단위당 자재 필요 비율", width: 200,  align:'right', editable: false, visible: true });
                      col.add({ dataField: "", label: "", width: 200,  align:'right', editable: false, visible: true });
        });

          const _inputstock = $hs.$("grid_inputstock")._instance;
        // 컬럼 라인 그리기
        _inputstock.option('showColumnLines', true);
        _inputstock.option('rowAlternationEnabled', false);
        _inputstock.option('showBorders', true);
        _inputstock.option('scrolling', {
            showScrollbar: 'always',
            useNative: true
        });


        $hs.html.select.init({
            id: "group_id",
            dataurl: "/api/data/DIVISION_LIST_NOT_IN_ALL",
            valueMember: "CODE",
            displayMember: "NAME",
            val: "SPS"
        });

        const today = new Date();

        // 6개월 전
        // const startDate = new Date(today);
        // startDate.setMonth(startDate.getMonth() - 6);

        // // 6개월 후
        // const endDate = new Date(today);
        // endDate.setMonth(endDate.getMonth() + 6);

        // yyyy-mm-dd 형식으로 변환
        const formatDate = (date) => {
            const yyyy = date.getFullYear();
            const mm = String(date.getMonth() + 1).padStart(2, '0');
            const dd = String(date.getDate()).padStart(2, '0');
            return `${yyyy}-${mm}-${dd}`;
        };

        //DAILY_CAPA_CALC 팝업창 안에 Plan ID콤보박스
        $hs.html.select.init({
            id: "PLAN_ID",
            dataurl: "/api/data/PLAN_ID",
            valueMember: "PLAN_ID",
            displayMember: "PLAN_ID",
            val: first_plan_id
        });

        // input에 기본값 설정
        $("#start_date").val(formatDate(today));
        $("#end_date").val(formatDate(today));


        // 팝업
        $hs.html.$popup.init('modalDialog');
        // $hs.html.$popup.init('modalDialog2');
        $hs.html.$popup.init('modal_plan_id');


        $hs.html.input.initAll();
    });

</script>

<!-- s:Content Header (Page header) -->
<div class="content-header">
    <div class="header-location">
        <div class="header-title">
            <span class="sub-title">투입 계획수립</span>
            <div class="toggle-container-favorites">
                <input type="checkbox" id="favorites-toggle" hidden>
                <label for="favorites-toggle" class="favorites-toggle">
                    <i class="bx bx-star"></i>
                </label>
            </div>
        </div>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#link"><i class="xi-ico xi-home"></i></a></li>
            <li class="breadcrumb-item active">PLAN ANALYSIS</li>
            <li class="breadcrumb-item active">투입 계획수립</li>
        </ol>
    </div>
    <div class="header-setting">
        <div class="header-btn">
            <div class="filter-toggle-container">
                <span class="toggle-title">Search Area</span>
                <input type="checkbox" id="favorites-toggle-switch" hidden checked>
                <label for="favorites-toggle-switch" class="switch"></label>
            </div>
        </div>
    </div>
</div>
<!-- /e:Content Header -->
<hr>
<!-- s:content -->
<section class="content-body" flex>
    <div class="content row" flex>
        <div class="col-lg-12" flex>
            <div class="content-box content-filter">
                <div class="box-body">
                    <div class="list-filter">
                        <div id="pnlSearch" class="filter-content form-inline">


                            <div class="form-group">
                                <div class="control-label"><label>GROUP</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="group_id" hs-df="group_id"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>DATE</label></div>
                                <div class="control-form">
                                    <div class="form-date-period">
                                        <input type="text" id="start_date" hs-df="start_date" class="form-datepicker form-control" data-toggle="datepicker" placeholder="Start Date">
                                        <span class="date-term">~</span>
                                        <input type="text" id="end_date" hs-df="end_date" class="form-datepicker form-control" data-toggle="datepicker" placeholder="End Date">
                                    </div>
                                </div>
                            </div>

                            <button id="btn_reset" type="button" class="btn btn-reset-icon" hs-btn><span class="blind">filter reset</span></button>
                            <button id="btnSearch" type="button" class="btn btn-search-icon">Search<span class="blind">filter search</span></button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="content-box" flex>
                <!-- 헤더부분 정의-->
                <div class="box-header">
                    <div class="header-title">투입 계획 버전</div>
                    <div class="header-btn">
                        <button id="btn_add" type="button" class="btn btn-add" hs-btn>CREATE VERSION</button>
                        <button id="btn_save_actual" type="button" class="btn btn-save" hs-btn>save</button>
                        <button id="btn_excel_download_summary" type="button" class="btn btn-download" hs-btn>excel</button>
                    </div>
                </div>
                <!-- 바디부분 정의-->
                <div class="box-body" flex style="flex: 1;">
                    <div class="grid-container" flex>
                        <div id="grid2" data-grid-id="INPUT_PLAN_SIMUL_HEADER"></div>
                    </div>
                </div>
                <!-- 헤더부분 정의-->
                <div class="box-header">
                    <div class="header-title">투입 계획수립<span class="title-list-count"><small id="total_cnt"></small></span></div>
                    <div class="header-btn">
                        <button id="btn_add_aps_input_date_update" type="button" class="btn btn-add" hs-btn>APS INPUT DATE UPDATE</button>
                        <button id="btn_add_plan" type="button" class="btn btn-add" hs-btn>add</button>
                        <button id="btn_grid_delete" type="button" class="btn shadow btn-delete" hs-btn>delete</button>
                        <button id="btn_save" type="button" class="btn btn-save" hs-btn>save</button>
                        <button id="btn_excel_download" type="button" class="btn btn-download">excel</button>
                    </div>
                </div>
                <!-- 바디부분 정의-->
                <div class="box-body" flex style="flex: 1;">
                    <div class="grid-container" flex>
                        <div id="grid" data-grid-id="INPUT_PLAN_SIMUL"></div>
                    </div>
                </div>


                <div class="box-header">
                    <div class="header-title">소요자재</div>
                </div>
                <div class="box-body">
                    <div class="grid-container">
                        <div id="grid_inputstock" data-grid-id="GRID_INPUTSTOCK"></div>
                    </div>
                </div>
            </div>

        </div>

    </div>

</section>
<!-- /e:content -->
<!-- s:modal -->
<div id="modalDialog" style="display:none; position:absolute; height:800px;width:600px;">
    <div class="modal-content animate-top" style="height: 600px;">
        <div id="modal-header" class="modal-header">
            <h5 class="modal-title">PERSONALIZATION</h5>
            <button type="button" class="btn-popup-close">
                <span class="xi-close-min" aria-hidden="true"></span>
            </button>
        </div>
        <div class="modal-body" id="panel_input">
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label"><label>Dimension</label></div>
                    </div>
                </div>
            </div>
            <div class="grid-container" flex>
                <div id="dimension_grid"></div>
            </div>
        </div>
        <div class="modal-footer">
            <button id="btnSave_dimension" type="button" class="btn btn-save">저장</button>
            <button type="button" class="btn btn-close btn-popup-close">닫기</button>
        </div>
    </div>
</div>
<!-- /e:modal -->
<!-- s:modal2 -->
@* <div id="modalDialog2" style="display:none; position:absolute; height:1200px;width:1200px;"> *@
@*     <div class="modal-content animate-top"> *@
@*         <div id="modal-header" class="modal-header"> *@
@*             <h5 class="modal-title" id="detail_title"></h5> *@
@*             <button type="button" class="btn-popup-close"> *@
@*                 <span class="xi-close-min" aria-hidden="true"></span> *@
@*             </button> *@
@*         </div> *@
@*         <div class="modal-body" id="panel_input"> *@
@*             <div class="row"> *@
@*                 <div class="col-sm-12"> *@
@*                     <div class="form-group" style="display:flex"> *@
@*                         <div class="control-label"><label>ITEM 별 확정수량</label></div> *@
@*                         <button id="btn_excel_download_detail" style="margin-left:auto" type="button" class="btn btn-download" hs-btn>excel</button> *@
@*                     </div> *@
@*                 </div> *@
@*             </div> *@
@*             <div class="grid-container" flex> *@
@*                 <div id="grid2"></div> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@
<!-- /e:modal -->
<div id="modal_plan_id" style="display:none; position:absolute; width:390px;">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">PLAN ID 선택</h5>
            <button type="button" class="btn-popup-close">
                <span class="xi-close-min" aria-hidden="true"></span>
            </button>
        </div>
        <div class="modal-body" style="min-height:100px">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="control-label"><label>PLAN ID</label></div>
                        <div class="control-form">
                            <select class="form-control" id="PLAN_ID" hs-df="PLAN_ID" style="width:180px" hs-handler="true"></select>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="control-label"><label></label></div>
                        <div class="control-form">
                            &nbsp;&nbsp;&nbsp;
                            <button id="btnSave_plan_id" style="width:120px" type="button" class="btn btn-add" hs-btn>CREATE</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">

            <button type="button" class="btn btn-close btn-popup-close">닫기</button>
        </div>
    </div>
</div>