@page
@model HS.Web.Pages.process_item_simul
@{
    string CLIENT = Model.Params["CLIENT"].AsString();
    string R = Model.Params["R"].AsString();
    string W = Model.Params["W"].AsString();
    string first_plan_id = Model.Params["first_plan_id"].AsString();
}



<script>


      function grd_bind_cal(basic_data) {
            let processedGroups = new Set();  // 이미 처리한 그룹 추적
            basic_data.forEach(item => 
            {
                        //그룹으로 묶을 키 생성
                        const group_APS_WIP_ROUTE_GRP_ID = item.APS_WIP_ROUTE_GRP_ID;
                        const group_CAPA_GROUP_ID = item.RESOURCE_CAPA_GROUP_ID;
                        const group_LAYER_INOUT = item.LAYER_INOUT;
                        const group_WIP_GBN = item.WIP_GBN;
                        const groupKey = `${group_APS_WIP_ROUTE_GRP_ID}|${group_CAPA_GROUP_ID}|${group_LAYER_INOUT}|${group_WIP_GBN}`;  // 복합 키 생성

                        if (!processedGroups.has(groupKey)) 
                        {

                            const comp_list = basic_data.filter(d =>
                                d.APS_WIP_ROUTE_GRP_ID === group_APS_WIP_ROUTE_GRP_ID && d.RESOURCE_CAPA_GROUP_ID === group_CAPA_GROUP_ID && d.LAYER_INOUT === group_LAYER_INOUT && d.WIP_GBN === group_WIP_GBN
                            );

                            for (let D of comp_list) 
                            {
                                        if(D["WIP_GBN"] =="WIP" || D["WIP_GBN"] =="NEW")
                                        {
                                            const dateKeys = Object.keys(D).filter(key => /^\d{4}-\d{2}-\d{2}$/.test(key));
                                            const first_date = dateKeys[0];
                                            let wip_first_boh = D["FIRST_BOH"];

                                                //날짜 항목만 반복
                                            dateKeys.forEach(col_date => 
                                            {

                                                    // 날짜 객체로 변환
                                                    const currentDate = new Date(col_date);
                                                    const prevDate = new Date(currentDate);
                                                    prevDate.setDate(currentDate.getDate() - 1); // 어제 날짜 설정
                                                    const prevDateStr = prevDate.toISOString().split('T')[0];  // YYYY-MM-DD 형식

                                                    let WIP_incomingValue = 0;
                                                    let WIP_outgoingValue = 0;
                                                    let WIP_nowEOH3Value = 0;
                                                    let WIP_prevEOH3Value = 0;
                                                    let WIP_nowBOHValue = 0;

                                                    if (D.GBN === "BOH") {
                                                         if(first_date == col_date)
                                                         {
                                                            //1번재 날짜에 DB에서 가져온 첫번째 BOH 수량 넣어줌
                                                            D[col_date] = wip_first_boh;
                                                         }
                                                         else{
                                                             D[col_date] = prevEOHValue ?? 0; // 이전 날짜의 EOH 값 사용
                                                         }
                                                    }

                                                    //comp_list에서 같은 날짜의 INCOMING, OUTGOING, EOH3 값을 가져오기
                                                    comp_list.forEach(row => {

                                                        if (row.GBN === "BOH" && row[col_date] !== undefined) {
                                                            WIP_nowBOHValue =   Number(row[col_date]);
                                                        }
                                                        if (row.GBN === "INCOMING" && row[col_date] !== undefined) {
                                                            WIP_incomingValue =   Number(row[col_date]);
                                                        }
                                                        if (row.GBN === "OUTGOING" && row[col_date] !== undefined) {
                                                            WIP_outgoingValue =   Number(row[col_date]);
                                                        }
                                                        if (row.GBN === "EOH" && row[col_date] !== undefined) {
                                                            const eohValue = (WIP_nowBOHValue + WIP_incomingValue) - WIP_outgoingValue;
                                                            row[col_date] = eohValue;
                                                            prevEOHValue = eohValue; // 다음 날짜를 위해 저장
                                                        }

                                                    });

                                            });

                                         } //endif //WIP과 NEW 끝

                             }

                             processedGroups.add(groupKey);  // 처리 완료 표시
                        }
             });

     return basic_data;
    };




    //NEW+WIP 그리드 계산
     function grd_bind_cal_TOT(basic_data) {
         let processedGroups = new Set();  // 이미 처리한 그룹 추적

                    basic_data.forEach(item => {
                        //그룹으로 묶을 키 생성
                        const group_APS_WIP_ROUTE_GRP_ID = item.APS_WIP_ROUTE_GRP_ID;
                        const group_CAPA_GROUP_ID = item.RESOURCE_CAPA_GROUP_ID;
                        const group_LAYER_INOUT = item.LAYER_INOUT;
                        const group_WIP_GBN = ""; // WIP_GBN 구분 하지 않음
                        const groupKey = `${group_APS_WIP_ROUTE_GRP_ID}|${group_CAPA_GROUP_ID}|${group_LAYER_INOUT}|${group_WIP_GBN}`;  // 복합 키 생성

                        if (!processedGroups.has(groupKey)) {

                            const comp_list = basic_data.filter(d =>
                                d.APS_WIP_ROUTE_GRP_ID === group_APS_WIP_ROUTE_GRP_ID && d.RESOURCE_CAPA_GROUP_ID === group_CAPA_GROUP_ID && d.LAYER_INOUT === group_LAYER_INOUT
                            );


                            let wip_boh_map = {};
                            let new_boh_map = {};

                            // 먼저 WIP인 BOH 값을 날짜별로 저장
                            // WIP인 BOH 값 저장
                            comp_list.forEach(D => {
                                if (D["WIP_GBN"] === "WIP" && D["GBN"] === "BOH") {
                                    const dateKeys = Object.keys(D).filter(key => /^\d{4}-\d{2}-\d{2}$/.test(key));
                                    dateKeys.forEach(col_date => {
                                        wip_boh_map[col_date] = Number(D[col_date]) || 0;
                                    });
                                }
                            });
                            // NEW인 BOH 값 저장
                            comp_list.forEach(D => {
                                if (D["WIP_GBN"] === "NEW" && D["GBN"] === "BOH") {
                                    const dateKeys = Object.keys(D).filter(key => /^\d{4}-\d{2}-\d{2}$/.test(key));
                                    dateKeys.forEach(col_date => {
                                        new_boh_map[col_date] = Number(D[col_date]) || 0;
                                    });
                                }
                            });

                            // NEW+WIP인 BOH 행에 WIP + NEW 값을 넣기
                            comp_list.forEach(D => {
                                if (D["WIP_GBN"] === "NEW+WIP" && D["GBN"] === "BOH") {
                                    const dateKeys = Object.keys(D).filter(key => /^\d{4}-\d{2}-\d{2}$/.test(key));
                                    dateKeys.forEach(col_date => {
                                        const wip_val = wip_boh_map[col_date] || 0;
                                        const new_val = new_boh_map[col_date] || 0;
                                        D[col_date] = wip_val + new_val;
                                    });
                                }
                            });


                            //eos계산



                            let wip_eoh_map = {};
                            let new_eoh_map = {};

                            // 먼저 WIP인 BOH 값을 날짜별로 저장
                            // WIP인 BOH 값 저장
                            comp_list.forEach(D => {
                                if (D["WIP_GBN"] === "WIP" && D["GBN"] === "EOH") {
                                    const dateKeys = Object.keys(D).filter(key => /^\d{4}-\d{2}-\d{2}$/.test(key));
                                    dateKeys.forEach(col_date => {
                                        wip_eoh_map[col_date] = Number(D[col_date]) || 0;
                                    });
                                }
                            });
                            // NEW인 BOH 값 저장
                            comp_list.forEach(D => {
                                if (D["WIP_GBN"] === "NEW" && D["GBN"] === "EOH") {
                                    const dateKeys = Object.keys(D).filter(key => /^\d{4}-\d{2}-\d{2}$/.test(key));
                                    dateKeys.forEach(col_date => {
                                        new_eoh_map[col_date] = Number(D[col_date]) || 0;
                                    });
                                }
                            });

                            // NEW+WIP인 BOH 행에 WIP + NEW 값을 넣기
                            comp_list.forEach(D => {
                                if (D["WIP_GBN"] === "NEW+WIP" && D["GBN"] === "EOH") {
                                    const dateKeys = Object.keys(D).filter(key => /^\d{4}-\d{2}-\d{2}$/.test(key));
                                    dateKeys.forEach(col_date => {
                                        const wip_val = wip_eoh_map[col_date] || 0;
                                        const new_val = new_eoh_map[col_date] || 0;
                                        D[col_date] = wip_val + new_val;
                                    });
                                }
                            });

                            processedGroups.add(groupKey);  // 처리 완료 표시
                        }
                    });

     return basic_data;
    };







</script>
<script>
    // 최신버번 PLAN_ID
    let first_plan_id = '@first_plan_id';



        // 헤더컬럼 초기값 정의
        const defaultColumns = [
            { dataField: "DIVISION_ID", label: "DIVISION", width: 100, editable: false, align:"center"},
            { dataField: "APS_WIP_ROUTE_GRP_ID", label: "APS_WIP_ROUTE_GRP_ID", width: 100,editable: false, visible: false,  },
            { dataField: "WIP_ROUTE_GROUP_NAME", label: "ROUTE", width: 100,editable: false },
            { dataField: "RESOURCE_CAPA_GROUP_NAME", label: "CAPA GROUP", width: 120, editable: false },
            { dataField: "LAYER_INOUT", label: "LAYER", width: 120, editable: false },
            { dataField: "WIP_GBN", label: "WIP", width: 120, editable: false },
            { dataField: "GBN", label: "GBN", width: 100, editable: false },
            { dataField: "RESOURCE_CAPA_GROUP_ID", label: "RESOURCE_CAPA_GROUP_ID", width: 10, editable: false , visible: false,},
            { dataField: "V_LEVEL", label: "V_LEVEL", width: 100, editable: false ,visible: false,},
        ];

    $hs.handler = {
        "btn_reset" : {
            click: function() {
                // 값 초기화
                $hs.$("pnlSearch").reset();
            }
        },
        "btnSearch": {
            click: function () {

                let toServer = {};
                toServer["terms"] = $hs.$("pnlSearch").val();

                $hs.fetch({
                    command: "search",
                    param: toServer
                }).then(fromServer => {


                    //  조회한 날짜로 헤더컬럼 재설정
                    const searchColumns = [];
                    const srchStartDate = new Date(toServer["terms"].start_date);
                    const srchEndDate = new Date(toServer["terms"].end_date);

                    defaultColumns.forEach(col => searchColumns.push(col));

                    for (let d = new Date(srchStartDate); d.getTime() <= srchEndDate.getTime(); d.setDate(d.getDate() + 1)) {
                        const dateStr = formatDate(d);
                        const column = {
                            dataField: dateStr,
                            label: dateStr,
                            width: 100,
                            editable: false,
                            type: "number",
                            align: "right"
                        };
                        searchColumns.push(column);
                    }

                    $hs.$("grid").columns(col => {
                        searchColumns.forEach(column => {
                            col.add({
                                dataField: column.dataField,
                                label: column.label,
                                width: column.width,
                                visible: (column.visible === undefined || column.visible === true || column.visible === "True"),
                                fixed: column.fixed === true || column.fixed === "True" ? true : false,
                                editable: column.editable === true || column.editable === "True" ? true : false,
                                type: column.type ? column.type : null,
                                align: column.align ? column.align : null
                            });
                        });
                    });


                    let basic_data = fromServer["data"];
                    let basic_data2 = grd_bind_cal(basic_data); //WIP별  NEW별  그리드 계산
                    let basic_data3 = grd_bind_cal_TOT(basic_data2); //WIP+NEW 행 그리드 계산 
                    $hs.$("grid").data(basic_data3);



                }).catch(e => $hs.errorBox(e))
            }
        },

        "btn_excel_download": {
            click : function() {
                $hs.util.$CommonUtil.excelDownload("grid", "공정별대기재공시뮬레이션");
            }
        },
        "btn_grid_setting" : {  // dimension 세팅
            click : function() {
                // 그리드 세팅 modal open
                // param : modal_id, grid_id, dimension_grid_id
                $hs.util.$CommonUtil.openGridSettingModal("modalDialog", "grid", "dimension_grid");
            }
        },

        "plan_id" : {
            change : function(data) {
               
                // PLAN ID 선택 시 달력에 시작날짜를 세팅한다.
                // data.value 잘라서 날짜형식으로 바꾸기
                const plan_id_parts = data.value.split("_");
                const date_part = plan_id_parts[1];
                // Date 포맷으로 변경
                const date_format = `${date_part.slice(0,4)}-${date_part.slice(4,6)}-${date_part.slice(6,8)}`;
                const dateObj = new Date(date_format);

                // 이번 달 마지막 날
                const endDate = new Date(dateObj.getTime() + 14 * 24 * 60 * 60 * 1000)

                // 실제 input에 설정
                document.getElementById('start_date').value = formatDate(dateObj);
                document.getElementById('end_date').value = formatDate(endDate);

            }
        },
        "grid": {
            contextHeaderClick: function (data) {
                $hs.util.$CommonUtil.getHeaderContextClick(data);
            },
            headerFormat: function (data) {
                data.cell.css("text-align", "center");
            },
        }
    }

    $hs.load(() => {

        // first_plan_id =  'SIMM_20250806_P04' //250812 LJH임시로 지정

        // 현재 localStorage에 저장된 메뉴 ID 가져옴
        var curMenuId = localStorage.getItem("curMenuId");
        // 즐겨찾기 여부 체크 후 버튼 리스너 추가
        $hs.util.$CommonUtil.checkFavorite(curMenuId);

        // search
        $hs.ui.button.init({ id: "btnSearch", class: ["smart-btn", "btn-search"] });


        // excel download
        $hs.ui.button.init({ id: "btn_excel_download"});

        // panel
        $hs.html.panel.init({ id: "pnlSearch" });

        // grid setting
        $hs.ui.button.init({ id: "btn_grid_setting"});
        $hs.ui.button.init({ id: "btnSave_dimension"});

        // grid
        $hs.dx.grid.init({
            id: "grid",
            width: "100%",
            height: "100%",
            sortable: true,
            selectMode: "single",
            rownumber: false,
            filterable: true,
            editable: true,
            handler: true,
            reOrdering: true, // 컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        })

        const _instance = $hs.$("grid")._instance;
        // 컬럼 라인 그리기
        _instance.option('showColumnLines', true);
        _instance.option('rowAlternationEnabled', false);
        _instance.option('showBorders', true);
        _instance.option('scrolling', {
            showScrollbar: 'always',
            useNative: true
        });

        // first_plan_id 잘라서 날짜형식으로 바꾸기
        const plan_id_parts = first_plan_id.split("_");
        const date_part = plan_id_parts[1];
        // Date 포맷으로 변경
        const date_format = `${date_part.slice(0,4)}-${date_part.slice(4,6)}-${date_part.slice(6,8)}`;
        const dateObj = new Date(date_format);

        // dateObj 기준 2주 뒤 날짜 계산
        const endDate = new Date(dateObj.getTime() + 14 * 24 * 60 * 60 * 1000)

        // 실제 input에 설정
        document.getElementById('start_date').value = formatDate(dateObj);
        document.getElementById('end_date').value = formatDate(endDate);
        //document.getElementById('end_date').value = formatDate(new Date("2025-08-07"));

        // 기존 default 컬럼 초기화
        const firstColumn = [];
        defaultColumns.forEach(col => firstColumn.push(col));

        // dateObj ~ endDate 까지 헤더 컬럼 생성 필요
        // 시작일 ~ 종료일까지 반복해서 컬럼 생성
        for (let d = new Date(dateObj); d <= endDate; d.setDate(d.getDate() + 1)) {
            const dateStr = formatDate(d);
            firstColumn.push({
                dataField: dateStr,
                label: dateStr,
                width: 100,
                editable: false
            });
        }

        // 그리드 컬럼가져오기
        // 1. id로 사용할 grid_id(js용)
        // 2. 초기화용 컬럼들 (LIST)
        // <div id="grid" data-grid-id="RESOURCE_GRID"></div>
        $hs.util.$CommonUtil.getGridSetting("grid", firstColumn);


        //demension grid
        $hs.dx.grid.init({
            id: "dimension_grid",
            width: "100%",
            height: "300px",
            sortable: true,
            selectMode: "single",
            dragRow: true,
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
        }).columns(col => {
            col.add({ dataField: "dataField", label: "dataField", width: 200, editable: false, visible:false })
            col.add({ dataField: "editable", label: "editable", width: 200, editable: false, visible:false })
            col.add({ dataField: "name", label: "NAME", width: 200, editable: false })
            col.add({ dataField: "visible", label: "VISIBLE", width: 80, editable: true, type: "boolean" })
            col.add({ dataField: "width", label: "WIDTH", width: 80, editable: true })
            col.add({ dataField: "fix", label: "FIX", width: 80, editable: true, type: "boolean" })
        });

        // 사업부
        $hs.html.select.init({
            id: "group_id",
            dataurl: "/api/data/DIVISION_LIST",
            valueMember: "CODE",
            displayMember: "NAME",
            val: "SPS"
        });

        // 사업부
        $hs.html.select.init({
            id: "plan_id",
            dataurl: "/api/data/PLAN_ID",
            valueMember: "PLAN_ID",
            displayMember: "PLAN_ID",
            val: first_plan_id
        });

        // 팝업
        $hs.html.$popup.init('modalDialog');

        //그리드 셀머지
         const gridInstance = $hs.$("grid")._instance;


         function mergeCellsByFields(fields) {
                const rows = gridInstance.getVisibleRows();
                const columns = gridInstance.getVisibleColumns();

                // 먼저 기존 병합 상태 초기화
                for (let i = 0; i < rows.length; i++) {
                    fields.forEach(fieldName => {
                        const columnIndex = columns.findIndex(col => col.dataField === fieldName);
                        const cell = gridInstance.getCellElement(i, columnIndex);
                        if (cell && cell.length) {
                            // display, rowspan 초기화
                            cell[0].style.display = '';
                            cell[0].removeAttribute('rowSpan');
                        }
                    });
                }

                // 본격 병합 로직
                fields.forEach(fieldName => {
                    const columnIndex = columns.findIndex(col => col.dataField === fieldName);

                    let prevValue = null;
                    let startRowIndex = 0;
                    let spanCount = 1;

                    for (let i = 0; i < rows.length; i++) {
                        const currentValue = rows[i].data[fieldName];

                        if (currentValue === prevValue) {
                            spanCount++;
                            const cell = gridInstance.getCellElement(i, columnIndex);
                            if (cell && cell.length) {
                                cell[0].style.display = 'none';
                            }
                        } else {
                            // 이전 그룹 병합 처리
                            if (spanCount > 1) {
                                const topCell = gridInstance.getCellElement(startRowIndex, columnIndex);
                                if (topCell && topCell.length) {
                                    topCell[0].rowSpan = spanCount;
                                    topCell[0].style.verticalAlign = 'middle';
                                }
                            }

                            // 새 그룹 시작
                            prevValue = currentValue;
                            startRowIndex = i;
                            spanCount = 1;
                        }
                    }

                    // 마지막 그룹 병합 처리
                    if (spanCount > 1) {
                        const topCell = gridInstance.getCellElement(startRowIndex, columnIndex);
                        if (topCell && topCell.length) {
                            topCell[0].rowSpan = spanCount;
                            topCell[0].style.verticalAlign = 'middle';
                        }
                    }
                });
            }


           gridInstance.getScrollable().on("scroll", function() {
            mergeCellsByFields(["DIVISION_ID","WIP_ROUTE_GROUP_NAME","RESOURCE_CAPA_GROUP_NAME","LAYER_INOUT","WIP_GBN"]);
           });

            gridInstance.option("onContentReady", function(e) {
            mergeCellsByFields(["DIVISION_ID","WIP_ROUTE_GROUP_NAME","RESOURCE_CAPA_GROUP_NAME","LAYER_INOUT","WIP_GBN"]);
           });

    });

    // yyyy-mm-dd 포맷으로 변환하는 함수
    function formatDate(date) {
        const yyyy = date.getFullYear();
        const mm = String(date.getMonth() + 1).padStart(2, '0'); // month: 0-based
        const dd = String(date.getDate()).padStart(2, '0');
        return `${yyyy}-${mm}-${dd}`;
    }
</script>

<!-- s:Content Header (Page header) -->
<div class="content-header">
    <div class="header-location">
        <div class="header-title">
            <span class="sub-title">공정별대기재공시뮬레이션</span>
            <div class="toggle-container-favorites">
                <input type="checkbox" id="favorites-toggle" hidden>
                <label for="favorites-toggle" class="favorites-toggle">
                    <i class="bx bx-star"></i>
                </label>
            </div>
        </div>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#link"><i class="xi-ico xi-home"></i></a></li>
            <li class="breadcrumb-item active">투입계획</li>
            <li class="breadcrumb-item active">공정별 대기재공 시뮬레이션</li>
        </ol>
    </div>
    <div class="header-setting">
        <div class="header-btn">
            <div class="filter-toggle-container">
                <span class="toggle-title">Search Area</span>
                <input type="checkbox" id="favorites-toggle-switch" hidden checked>
                <label for="favorites-toggle-switch" class="switch"></label>
            </div>
        </div>
    </div>
</div>
<!-- /e:Content Header -->
<hr>
<!-- s:content -->
<section class="content-body" flex>
    <div class="content row" flex>
        <div class="col-lg-12" flex>
            <div class="content-box content-filter">
                <div class="box-body">
                    <div class="list-filter">
                        <div id="pnlSearch" class="filter-content form-inline">

                            <div class="form-group">
                                <div class="control-label"><label>GROUP</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="group_id" hs-df="group_id"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>PLAN ID</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="plan_id" hs-df="PLAN_ID" hs-handler="true"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>DATE</label></div>
                                <div class="control-form">
                                    <div class="form-date-period">
                                        <input type="text" id="start_date" hs-df="start_date" class="form-datepicker form-control" data-toggle="datepicker" placeholder="Start Date">
                                        <span class="date-term">~</span>
                                        <input type="text" id="end_date" hs-df="end_date" class="form-datepicker form-control" data-toggle="datepicker" placeholder="End Date">
                                    </div>
                                </div>
                            </div>


                            <button type="button" class="btn btn-reset-icon"><span class="blind">filter reset</span></button>
                            <button id="btnSearch" type="button" class="btn btn-search-icon">Search<span class="blind">filter search</span></button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="content-box" flex>
                <!-- 헤더부분 정의-->
                <div class="box-header">
                    <div class="header-title"><span class="title-list-count"><small></small></span></div>
                    <div class="header-btn">
                        <button id="btn_excel_download" type="button" class="btn btn-download">excel</button>
                        <button id="btn_grid_setting" type="button" class="btn btn-setting-icon"><span class="blind">setting</span></button>
                    </div>
                </div>
                <!-- 바디부분 정의-->
                <div class="box-body" flex>
                    <div class="grid-container" flex>
                        <div id="grid" data-grid-id="process_item_simul"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- /e:content -->
<!-- s:modal -->
<div id="modalDialog" style="display:none; position:absolute; height:400px;width:600px;">
    <div class="modal-content animate-top">
        <div id="modal-header" class="modal-header">
            <h5 class="modal-title">PERSONALIZATION</h5>
            <button type="button" class="btn-popup-close">
                <span class="xi-close-min" aria-hidden="true"></span>
            </button>
        </div>
        <div class="modal-body" id="panel_input">
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label"><label>Dimension</label></div>
                    </div>
                </div>
            </div>
            <div class="grid-container" flex>
                <div id="dimension_grid"></div>
            </div>
        </div>
        <div class="modal-footer">
            <button id="btnSave_dimension" type="button" class="btn btn-save">저장</button>
            <button type="button" class="btn btn-close btn-popup-close">닫기</button>
        </div>
    </div>
</div>
<!-- /e:modal -->