@page
@model HS.Web.Pages.control_board
@{
    string CLIENT = Model.Params["CLIENT"].AsString();
    string R = Model.Params["R"].AsString();
    string W = Model.Params["W"].AsString();
}
<style scoped>
    .checkbox-btn {
        display: flex;
        align-items: center;
        padding: 6px 12px;
        border: 1px solid #ccc;
        border-radius: 6px;
        background-color: #f9f9f9;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 14px;
        color: #333;
    }

    .checkbox-btn input[type="checkbox"] {
        margin-right: 8px;
        accent-color: #0078D4; /* 체크박스 색상 (파란색 톤) */
    }

    .checkbox-btn:hover {
        background-color: #e6f0ff;
        border-color: #0078D4;
        color: #0078D4;
    }
</style>

<script>

    // 헤더컬럼 초기값 정의

      const defaultColumns = [
          { dataField: "MASTER_ID", label: "MASTER_ID", width: 100, editable: false, align: "center" },
          { dataField: "PLAN_ID", label: "PLAN_ID", width: 150, editable: false},
          { dataField: "INSERT_ID", label: "작성자 ID", width: 70, editable: false},
          { dataField: "DESCR", label: "Plan Description", width: 150, editable: true},
          { dataField: "STATUS", label: "STATUS", width: 80, editable: false, align: "center" },
          { dataField: "RUN", label: "RUN", width: 80, editable: false, align: "center", type:"button", buttonLabel : "RUN", useTemplate : true },
          { dataField: "INBOUND_START", label: "START", width: 150, editable: false, columnGroup:"Inbound", type:"datetime" },
          { dataField: "INBOUND_END", label: "END", width: 150, editable: false, columnGroup:"Inbound", type:"datetime" },
          { dataField: "ENGINE_START", label: "START", width: 150, editable: false, columnGroup:"Engine", type:"datetime"  },
          { dataField: "ENGINE_END", label: "END", width: 150, editable: false,   columnGroup:"Engine" , type:"datetime" },
          { dataField: "OUTBOUND_START", label: "START", width: 150, editable: false, columnGroup:"Outbound" , type:"datetime" },
          { dataField: "OUTBOUND_END", label: "END", width: 150, editable: false, columnGroup:"Outbound" , type:"datetime" },
      ];


    $hs.handler = {
        "btn_reset" : {
            click: function() {
                // 값 초기화
                $hs.$("pnlSearch").reset();
            }
        },
        "btnSearch": {
            click: function () {

                let toServer = {};
                toServer["terms"] = $hs.$("pnlSearch").val();

                $hs.fetch({
                    command: "search",
                    param: toServer
                }).then(fromServer => {

                    $hs.$("grid").data(fromServer["data"]);
                    $('#total_cnt').text('(Total Count:' + fromServer["data"].length + ')');

                    $("#grid").dxDataGrid({
                        // 버튼 비활성화 시키기
                        onCellPrepared: function(e) {
                            
                            if (e.rowType === "data" && e.column.dataField === "RUN") {
                                const $button = $(e.cellElement).find(".dx-button");
                                if ($button.length) {
                                    const instance = $button.dxButton("instance");
                                    if (e.data.STATUS !== "CREATED") {
                                        instance.option("disabled", true);
                                    }
                                 
                                }
                                //20250922 이정환 주석처리  데이터가 있으면 버튼은 비활성 처리 ??
                                if(fromServer["data_search_count"].length > 0) { // 본인 돌릴건 있어야함.
                                    const instance = $button.dxButton("instance");
                                    instance.option("disabled", true);
                                }
                            }

                            
                        }
                    });

                    // PLAN Option 추가하기

                    // 뒤에 % 붙은애들은 100곱해서 나와야함
                    fromServer["data_option"].forEach(item => {
                        item["대기 LEAD TIME(%)"] = item["대기 LEAD TIME(%)"] * 100;
                        item["가공 LEAD TIME(%)"] = item["가공 LEAD TIME(%)"] * 100;
                        item["일 물량제약(%)"] = item["일 물량제약(%)"] * 100;
                    });

                    console.log(fromServer["data_option"]);

                    const dataOption = fromServer["data_option"][0];

                    // 숫자 입력 필드 세팅
                    document.getElementById("wait_lead_time").value = dataOption["대기 LEAD TIME(%)"] ?? "100";
                    document.getElementById("process_lead_time").value = dataOption["가공 LEAD TIME(%)"] ?? "100";
                    document.getElementById("day_capacity_limit").value = dataOption["일 물량제약(%)"]?? "100";

                    // 체크박스 세팅 함수
                    function setCheckbox(value, checked) {
                      const checkbox = document.querySelector(`input[type="checkbox"][value="${value}"]`);
                      if (checkbox) checkbox.checked = checked;
                    }

                    // 생산 Type 체크박스
                    setCheckbox("MASS", dataOption.MASS === 1);
                    setCheckbox("SAMPLE", dataOption.SAMPLE === 1);
                    setCheckbox("TEST", dataOption.TEST === 1);
                    setCheckbox("HOLD", dataOption.HOLD_USE === 1);
                    setCheckbox("JIG", dataOption.JIG_CAPA === 1);

                    // 투입계획 대상 체크박스
                    setCheckbox("MPS", dataOption.MPS_UPLOAD === 1);
                    setCheckbox("INPUT_PLAN", dataOption.INPUT_PLAN === 1);

                    // 자재 제약여부
                    const constraintValue = dataOption["MATERIAL_CONSTRAINT_YN"]; // 'Y' 또는 'N'

                    // 자재 제약여부 셀렉트 박스 초기화 및 값 세팅
                    $hs.html.select.init({
                        id: "material_constraint",
                        data: [
                            { label: "유한", value: "Y" },
                            { label: "무한", value: "N" }
                        ],
                        val: constraintValue
                    });


                    // $hs.$("grid2").data(fromServer["data_option"]);
                    // $hs.$("group_id").val(fromServer["data_option"][0]["PLAN_TARGET"]);

                    if (fromServer["data_dept_by"].length > 0) {
                        $hs.$("grid3").data(fromServer["data_dept_by"]);
                    } else {
                        // 공정그룹별 기본값으로
                        const default_data = [
                            {GUBUN : "mSAP", INPUT: 0, E_LESS_CU_PLATING: 0, PATTERN_CU_PLATING: 0, M_CZ: 0},
                            {GUBUN : "Tenting", INPUT: 0, E_LESS_CU_PLATING: 0, PATTERN_CU_PLATING: 0, M_CZ: 0},
                            {GUBUN : "내층", INPUT: 0, E_LESS_CU_PLATING: 0, PATTERN_CU_PLATING: 0, M_CZ: 0},
                            {GUBUN : "외층", INPUT: 0, E_LESS_CU_PLATING: 0, PATTERN_CU_PLATING: 0, M_CZ: 0}
                        ];

                        $hs.$("grid3").data(default_data);
                    }



                }).catch(e => $hs.errorBox(e))
            }
        },
        "btn_grid_save": {
            click: function () {
                console.log($hs.$("grid").data());

                let updated_data = [];
                // 클릭 이력으로 수정 or 입력여부 체크
                $hs.$("grid").data().forEach(item => {
                    if(item.$rowChecked == false ) {
                        updated_data.push(item);
                    }
                });

                let toServer = {};
                toServer["data"] = updated_data;

                console.log(toServer);

                if(toServer["data"].length == 0) {
                    alert("변경된 데이터가 없습니다.");
                }

                $hs.fetch({
                    command: "save",
                    param: toServer
                }).then(fromServer => {
                    alert("저장되었습니다.");
                    
                }).catch(e => $hs.errorBox(e))
            },
        },
        "btn_plan_create": {
            click : function() {
                $hs.fetch({
                    command: "create_version"
                }).then(fromServer => {
                    console.log(fromServer["data"]);
                    alert("생성되었습니다.");
                    $hs.handler["btnSearch"].click();
                }).catch(e => $hs.errorBox(e))
            }
        },
        "btn_excel_download": {
            click : function() {
                $hs.util.$CommonUtil.excelDownload("grid", "PLAN_INFO");
            }
        },
        "btn_option_excel_download" : { // Planning Option 엑셀 다운로드 버튼
            click : function() {
                // $hs.util.$CommonUtil.excelDownload("grid2", "PLANNING_OPTION");
            }
        },
        "btn_option_grid_save" : { // Planning Oprtion 저장 버튼
            click : function() {
                const waitLeadTime = document.getElementById('wait_lead_time').value;
                const processLeadTime = document.getElementById('process_lead_time').value;
                const dayCapacityLimit = document.getElementById('day_capacity_limit').value;

                console.log("대기 LEAD TIME(%):", waitLeadTime);
                console.log("가공 LEAD TIME(%):", processLeadTime);
                console.log("일 물량제약(%):", dayCapacityLimit);

                if (waitLeadTime === "") {
                    alert("대기 LEAD TIME(%)을 입력해주세요");
                    return;
                }
                if (processLeadTime === "") {
                    alert("가공 LEAD TIME(%)을 입력해주세요");
                    return;
                }
                if (dayCapacityLimit === "") {
                    alert("일 물량제약(%)을 입력해주세요");
                    return;
                }

                // 생산 Type 체크 상태 확인
                const massChecked = document.querySelector('input[value="MASS"]').checked;
                const sampleChecked = document.querySelector('input[value="SAMPLE"]').checked;
                const testChecked = document.querySelector('input[value="TEST"]').checked;
                const holdChecked = document.querySelector('input[value="HOLD"]').checked;
                const jigChecked = document.querySelector('input[value="JIG"]').checked;

                // 투입계획 대상 체크 상태 확인
                const mpsChecked = document.querySelector('input[value="MPS"]').checked;
                const inputPlanChecked = document.querySelector('input[value="INPUT_PLAN"]').checked;


                const material_constraint = document.getElementById('material_constraint').value;


                let toServer = {};

                toServer["data"] =  [{
                    waitLeadTime: Number(waitLeadTime),
                    processLeadTime: Number(processLeadTime),
                    dayCapacityLimit: Number(dayCapacityLimit),
                    MASS: massChecked ? 1 : 0 ,
                    SAMPLE: sampleChecked ? 1 : 0 ,
                    TEST: testChecked ? 1 : 0 ,
                    HOLD: holdChecked ? 1: 0,
                    JIG: jigChecked ? 1: 0,
                    MPS: mpsChecked ? 1 : 0 ,
                    INPUT_PLAN: inputPlanChecked ? 1 : 0,
                    material_constraint : material_constraint
                }];

                toServer["data_dept_by"] = $hs.$("grid3").data();

                console.log(toServer);

                $hs.fetch({
                    command: "save_option",
                    param: toServer
                }).then(fromServer => {
                    alert("저장되었습니다.");
                }).catch(e => $hs.errorBox(e))
            }
        },
        "grid" : {
            contextHeaderClick: function (data) {
                $hs.util.$CommonUtil.getHeaderContextClick(data);
            },
            headerFormat: function (data) {
                if (data.dataField == "DESCR") {
                    data.cell.css("color", "blue");
                }
                data.cell.css("text-align", "center");
            },
            cellClick: function (data) {
                
                if(data.dataField == "RUN") {
                    // STATUS가 CREATED 일 경우에만 RUN을 실행한다.
                    if (data.rowData["STATUS"] == "CREATED") {                       
                      
                        let toServer = {};
                        toServer["terms"] = data.rowData;


                        $hs.fetch({
                            command: "run",
                            param : toServer
                        }).then(fromServer => {
                            alert("실행되었습니다.");
                            $hs.handler["btnSearch"].click();
                        }).catch(e => $hs.errorBox(e))

                      
                    }
                } 

            },
            cellDoubleClick: function (data) {
                console.log("cellDoubleClick");
                console.log(data);

                
                let toServer = {};
                toServer["terms"] = data.rowData;

                console.log(toServer);

                $hs.fetch({
                    command: "search_his",
                    param : toServer
                }).then(fromServer => {
                    console.log(fromServer["data_search_his_dept_by"]);

                    $hs.$("grid4").data(fromServer["data_search_his"]);
                    $hs.$("grid5").data(fromServer["data_search_his_dept_by"]);

                    $hs.$("modalDialog").open();
                }).catch(e => $hs.errorBox(e))

                
            },
        },
        "grid4" : {
            headerFormat: function (data) {
                data.cell.css("text-align", "center");
            },
        },
        "grid5" : {
            headerFormat: function (data) {
                data.cell.css("text-align", "center");
            },
        },
    }

    $hs.load(() => {
        // 현재 localStorage에 저장된 메뉴 ID 가져옴
        var curMenuId = localStorage.getItem("curMenuId");
        // 즐겨찾기 여부 체크 후 버튼 리스너 추가
        $hs.util.$CommonUtil.checkFavorite(curMenuId);

        // search
        $hs.ui.button.init({ id: "btnSearch", class: ["smart-btn", "btn-search"] });

        // grid save
        $hs.ui.button.init({ id: "btn_grid_save", enabled: @W });
        $hs.ui.button.init({ id: "btn_plan_create", enabled: @W });
        $hs.ui.button.init({ id: "btn_option_grid_save", enabled: @W });
        

        // excel download
        $hs.ui.button.init({ id: "btn_excel_download"});

        // panel
        $hs.html.panel.init({ id: "pnlSearch" });


        // grid
        $hs.dx.grid.init({
            id: "grid",
            width: "100%",
            height: "100%",
            sortable: true,
            selectMode: "single",
            rownumber: false,
            filterable: true,
            editable: true,
            handler: true,
            reOrdering: true, // 컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        }).columnGroups(group => {
            group.add({
                label : "Inbound"
                , name : "Inbound"
                , align : "center"
            });

            group.add({
                label: "Engine"
                , name: "Engine"
                , align : "center"
            });

            group.add({
                label: "Outbound"
                , name: "Outbound"
                , align : "center"
            });

        })


        // 그리드 컬럼가져오기
        // 1. id로 사용할 grid_id(js용)
        // 2. 초기화용 컬럼들 (LIST)
        // <div id="grid" data-grid-id="RESOURCE_GRID"></div>
        $hs.util.$CommonUtil.getGridSetting("grid", defaultColumns);

        const _instance = $hs.$("grid")._instance;
        // 컬럼 라인 그리기
        _instance.option('showColumnLines', true);
        _instance.option('rowAlternationEnabled', false);
        _instance.option('showBorders', true);
        _instance.option('scrolling', {
            showScrollbar: 'always',
            useNative: true
        });

        _instance.option("columnResizingMode", "widget");




        // grid2
        // $hs.dx.grid.init({
        //     id: "grid2",
        //     width: "100%",
        //     height: "100%",
        //     sortable: true,
        //     selectMode: "single",
        //     rownumber: false,
        //     filterable: false,
        //     editable: true,
        //     handler: true,
        //     reOrdering: true, 컬럼 재배치 여부
        //     headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
        //         {
        //             menu : "CAL",
        //             child : [
        //                 "Count",
        //                 "Avg",
        //                 "Max",
        //                 "Min",
        //                 "Sum",
        //                 "Std. Div"
        //             ]
        //         }
        //     ],
        // }).columnGroups(group => {
        //     group.add({
        //         label : "생산 Type"
        //         , name : "PRODUCTION_TYPE"
        //         , align : "center"
        //     });
        // })

        // const defaultColumns2 = [
        //     { dataField: "대기 LEAD TIME(%)", label: "대기 Lead Time(%)", width: 140, editable: true},
        //     { dataField: "가공 LEAD TIME(%)", label: "가공 Lead Time (%)", width: 140, editable: true},
        //     { dataField: "일 물량제약(%)", label: "일 물량제약 (%)", width: 130, editable: true},
        //     { dataField: "MASS", label: "양산", width: 50, editable: true, type: "check", columnGroup:"PRODUCTION_TYPE"},
        //     { dataField: "SAMPLE", label: "샘플", width: 50, editable: true, type: "check", columnGroup:"PRODUCTION_TYPE"},
        //     { dataField: "TEST", label: "테스트", width: 50, editable: true, type: "check", columnGroup:"PRODUCTION_TYPE"}
        // ];

        // 그리드 컬럼가져오기
        // 1. id로 사용할 grid_id(js용)
        // 2. 초기화용 컬럼들 (LIST)
        // <div id="grid" data-grid-id="RESOURCE_GRID"></div>
        // $hs.util.$CommonUtil.getGridSetting("grid2", defaultColumns2);

        // const _instance2 = $hs.$("grid2")._instance;
        // 컬럼 라인 그리기
        // _instance2.option('showColumnLines', true);
        // _instance2.option('rowAlternationEnabled', false);
        // _instance2.option('showBorders', true);
        


        // grid3
        $hs.dx.grid.init({
            id: "grid3",
            // width: "100%",
            // height: "100%",
            sortable: true,
            selectMode: "single",
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
            reOrdering: true, // 컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        }).columnGroups(group => {
            group.add({
                label : "공정그룹 별 구분별 계획비율 %"
                , name : "dept_gbn"
                , align : "center"
            });
        })

        const defaultColumns3 = [
            { dataField: "GUBUN", label: "구분", width: 100, editable: true, columnGroup:"dept_gbn"},
            { dataField: "INPUT", label: "투입(가상공정)", width: 120, editable: true, columnGroup:"dept_gbn"},
            { dataField: "E_LESS_CU_PLATING", label: "E-less Cu Plating", width: 170, editable: true, columnGroup:"dept_gbn"},
            { dataField: "PATTERN_CU_PLATING", label: "Pattern Cu Plating(Fill)", width: 170, editable: true, columnGroup:"dept_gbn"},
            { dataField: "SM_CZ", label: "SM CZ", width: 170, editable: true, columnGroup:"dept_gbn"}
        ];

        // 그리드 컬럼가져오기
        // 1. id로 사용할 grid_id(js용)
        // 2. 초기화용 컬럼들 (LIST)
        // <div id="grid" data-grid-id="RESOURCE_GRID"></div>
        $hs.util.$CommonUtil.getGridSetting("grid3", defaultColumns3);

        const _instance3 = $hs.$("grid3")._instance;
        // 컬럼 라인 그리기
        _instance3.option('showColumnLines', true);
        _instance3.option('rowAlternationEnabled', false);
        _instance3.option('showBorders', true);
        // _instance2.option('scrolling', {
        //     showScrollbar: 'always',
        //     useNative: true
        // });
        _instance3.option("columnResizingMode", "widget");


        // HIS GRID
        // grid4
        $hs.dx.grid.init({
            id: "grid4",
            width: "100%",
            // height: "300px",
            sortable: true,
            selectMode: "single",
            // dragRow: true,
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
        }).columnGroups(group => {
            group.add({
                label : "생산 Type"
                , name : "type"
                , align : "center"
            });
            group.add({
                label : "투입계획 대상"
                , name : "target"
                , align : "center"
            });
        })

        const defaultColumns4 = [
            { dataField: "대기 LEAD TIME", label: "대기 LEAD TIME(%)", width: 120, editable: false, align:"center"},
            { dataField: "가공 LEAD TIME", label: "가공 LEAD TIME(%)", width: 120, editable: false, align:"center"},
            { dataField: "일 물량 제약", label: "일 물량제약(%)", width: 120, editable: false, align:"center"},
            { dataField: "양산", label: "양산", width: 80, editable: false, columnGroup:"type", align:"center"},
            { dataField: "샘플", label: "샘플", width: 80, editable: false, columnGroup:"type", align:"center"},
            { dataField: "테스트", label: "테스트", width: 80, editable: false, columnGroup:"type", align:"center"},
            { dataField: "HOLD UES", label: "HOLD 포함", width: 100, editable: false, columnGroup:"type", align:"center"},
            { dataField: "JIG CAPA", label: "JIG 제약", width: 100, editable: false, columnGroup:"type", align:"center"},
            { dataField: "MPS UPLOAD 물량", label: "MPS UPLOAD 물량", width: 120, editable: false, columnGroup:"target", align:"center"},
            { dataField: "투입계획 수립 현황", label: "투입계획 수립 물량", width: 120, editable: false, columnGroup:"target", align:"center"},
            { dataField: "자재제약여부", label: "자재 제약 여부", width: 120, editable: false, align:"center"}
        ];

        $hs.util.$CommonUtil.getGridSetting("grid4", defaultColumns4);

        const _instance4 = $hs.$("grid4")._instance;
        // 컬럼 라인 그리기
        _instance4.option('showColumnLines', true);
        _instance4.option('rowAlternationEnabled', false);
        _instance4.option('showBorders', true);
        // _instance2.option('scrolling', {
        //     showScrollbar: 'always',
        //     useNative: true
        // });
        _instance4.option("columnResizingMode", "widget");


        // HIS GRID2
        // grid5
        $hs.dx.grid.init({
            id: "grid5",
            width: "60%",
            // height: "300px",
            sortable: true,
            selectMode: "single",
            // dragRow: true,
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
        }).columnGroups(group => {
            group.add({
                label : "공정그룹 별 구분별 계획비율 %"
                , name : "dept_gbn"
                , align : "center"
            });
        })

        const defaultColumns5 = [
            { dataField: "GUBUN", label: "구분", width: 100, editable: false, columnGroup:"dept_gbn", align:"center"},
            { dataField: "INPUT", label: "투입(가상공정)", width: 120, editable: false, columnGroup:"dept_gbn", align:"center"},
            { dataField: "E_LESS_CU_PLATING", label: "E-less Cu Plating", width: 170, editable: false, columnGroup:"dept_gbn", align:"center"},
            { dataField: "PATTERN_CU_PLATING_FILL", label: "Pattern Cu Plating(Fill)", width: 170, editable: false, columnGroup:"dept_gbn", align:"center"},
            { dataField: "SM_CZ", label: "SM CZ", width: 120, editable: false, columnGroup:"dept_gbn", align:"center"}
        ];

        $hs.util.$CommonUtil.getGridSetting("grid5", defaultColumns5);

        const _instance5 = $hs.$("grid5")._instance;
        // 컬럼 라인 그리기
        _instance5.option('showColumnLines', true);
        _instance5.option('rowAlternationEnabled', false);
        _instance5.option('showBorders', true);
        // _instance2.option('scrolling', {
        //     showScrollbar: 'always',
        //     useNative: true
        // });
        _instance5.option("columnResizingMode", "widget");



        // 당일로 체크
        const cur_date = new Date();

        // 실제 input에 설정
        document.getElementById('plan_date').value = formatDate(cur_date);




        // 자제 제약여부
        $hs.html.select.init({
            id: "material_constraint",
            data: [
                { label: "유한", value: "Y" },
                { label: "무한", value: "N" }
            ],
            val: "Y"
        });

        // 팝업
        $hs.html.$popup.init('modalDialog');

        $hs.html.input.initAll();

    });

    // yyyy-mm-dd 포맷으로 변환하는 함수
    function formatDate(date) {
        const yyyy = date.getFullYear();
        const mm = String(date.getMonth() + 1).padStart(2, '0'); // month: 0-based
        const dd = String(date.getDate()).padStart(2, '0');
        return `${yyyy}-${mm}-${dd}`;
    }

</script>

<!-- s:Content Header (Page header) -->
<div class="content-header">
    <div class="header-location">
        <div class="header-title">
            <span class="sub-title">Control Board</span>
            <div class="toggle-container-favorites">
                <input type="checkbox" id="favorites-toggle" hidden>
                <label for="favorites-toggle" class="favorites-toggle">
                    <i class="bx bx-star"></i>
                </label>
            </div>
        </div>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#link"><i class="xi-ico xi-home"></i></a></li>
            <li class="breadcrumb-item active">Plan Control</li>
            <li class="breadcrumb-item active">Control Board</li>
        </ol>
    </div>
    <div class="header-setting">
        <div class="header-btn">
            <div class="filter-toggle-container">
                <span class="toggle-title">Search Area</span>
                <input type="checkbox" id="favorites-toggle-switch" hidden checked>
                <label for="favorites-toggle-switch" class="switch"></label>
            </div>
        </div>
    </div>
</div>
<!-- /e:Content Header -->
<hr>
<!-- s:content -->
<section class="content-body" flex>
    <div class="content row" flex>
        <div class="col-lg-12" flex>
            <div class="content-box content-filter">
                <div class="box-body">
                    <div class="list-filter">
                        <div id="pnlSearch" class="filter-content form-inline">

                            <div class="form-group">
                                <div class="control-label"><label>PLAN DATE</label></div>
                                <div class="control-form">
                                    <div class="form-date-period">
                                        <input type="text" id="plan_date" hs-df="plan_date" class="form-datepicker form-control" data-toggle="datepicker" placeholder="Plan Date">
                                    </div>
                                </div>
                            </div>

                            <button id="btn_reset" type="button" class="btn btn-reset-icon" hs-btn><span class="blind">filter reset</span></button>
                            <button id="btnSearch" type="button" class="btn btn-search-icon" hs-btn>Search<span class="blind">filter search</span></button>
                            <button id="btn_plan_create" type="button" class="btn btn-add" hs-btn>계획 생성</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="content-box" flex>
                <!-- 헤더부분 정의-->
                <div class="box-header">
                    <div class="header-title">Plan Info<span class="title-list-count"><small id="total_cnt"></small></span></div>
                    <div class="header-btn">
                        <button id="btn_grid_save" type="button" class="btn btn-save" hs-btn>save</button>
                        <button id="btn_excel_download" type="button" class="btn btn-download" hs-btn>excel</button>
                    </div>
                </div>
                <!-- 바디부분 정의-->
                <div class="box-body" flex>
                    <div class="grid-container" flex>
                        <div id="grid" data-grid-id="CONTROL_BOARD"></div>
                    </div>
                </div>

                <!-- 헤더부분 정의-->
                <div class="box-header" style="margin-top:10px;">
                    <div class="header-title" style="display:flex;">Planning Option</div>
                    <div class="header-btn">
                        <button id="btn_option_grid_save" type="button" class="btn btn-save" hs-btn>save</button>
                        <button id="btn_option_excel_download" type="button" class="btn btn-download" hs-btn>excel</button>
                    </div>
                </div>
                <!-- 바디부분 정의-->
                <div class="row">                 
                    <div class="col-md-5" flex>                       
                        <div class="form-group" style="display:flex; align-items:center;">
                            <div class="control-label" style="width:150px;"><label>대기 LEAD TIME(%)</label></div>
                            <div class="control-form" style="flex:1;">
                                <input type="number" class="form-control" id="wait_lead_time" hs-df="wait_lead_time" hs-handler="true" style="width:100px" min="0" max="100"/>
                            </div>
                        </div>
                        <div class="form-group" style="display:flex; align-items:center;">
                            <div class="control-label" style="width:150px;"><label>가공 LEAD TIME(%)</label></div>
                            <div class="control-form" style="flex:1;">
                                <input type="number" class="form-control" id="process_lead_time" hs-df="process_lead_time" hs-handler="true" style="width:100px" min="0" max="100" />
                            </div>
                        </div>
                        <div class="form-group" style="display:flex; align-items:center;">
                            <div class="control-label" style="width:150px;"><label>일 물량제약(%)</label></div>
                            <div class="control-form" style="flex:1;">
                                <input type="number" class="form-control" id="day_capacity_limit" hs-df="day_capacity_limit" hs-handler="true" style="width:100px" min="0" max="100" />
                            </div>
                        </div>
                        <div class="form-group" style="display:flex; align-items:center;">
                            <div class="control-label" style="width:150px;"><label>생산 Type</label></div>
                            <div class="control-form" style="flex:1; display:flex; gap:10px;">
                                <label class="checkbox-btn"><input type="checkbox" value="MASS" />양산</label>
                                <label class="checkbox-btn"><input type="checkbox" value="SAMPLE" />샘플</label>
                                <label class="checkbox-btn"><input type="checkbox" value="TEST" />테스트</label>
                                <label class="checkbox-btn"><input type="checkbox" value="HOLD" />HOLD 포함</label>
                                <label class="checkbox-btn"><input type="checkbox" value="JIG" />JIG 제약</label>
                            </div>
                        </div>
                        <div class="form-group" style="display:flex; align-items:center;">
                            <div class="control-label" style="width:150px;"><label>투입계획 대상</label></div>
                            <div class="control-form" style="flex:1; display:flex; gap:10px;">
                                <label class="checkbox-btn"><input type="checkbox" value="MPS" />MPS Upload 물량</label>
                                <label class="checkbox-btn"><input type="checkbox" value="INPUT_PLAN" />투입계획 수립 물량</label>
                            </div>
                        </div>
                        <div class="form-group" style="display:flex; align-items:center;">
                            <div class="control-label" style="width:150px;"><label>자재 제약 여부</label></div>
                            <div class="control-form" style="flex:1; display:flex; gap:10px;">
                                <select class="form-control" id="material_constraint" hs-df="material_constraint"></select>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-7" flex>                     
                        <div id="grid3" data-grid-id="CONTROL_BOARD_OPTIOLN2"></div>
                    </div>
                </div>
                @* <div class="box-body" flex> *@
                @*     <div class="grid-container" flex> *@
                @*         <div id="grid2" data-grid-id="CONTROL_BOARD_OPTIOLN"></div> *@
                @*     </div> *@

                @*     <div class="grid-container" flex> *@
                @*         <div id="grid3" data-grid-id="CONTROL_BOARD_OPTIOLN"></div> *@
                @*     </div> *@
                @* </div> *@
            </div>
        </div>
    </div>
</section>
<!-- /e:content -->
<!-- /s:modal-->
<div id="modalDialog" style="display:none; position:absolute; height:400px;width:1200px;">
    <div class="modal-content animate-top">
        <div id="modal-header" class="modal-header">
            <h5 class="modal-title">Planning Option</h5>
            <button type="button" class="btn-popup-close">
                <span class="xi-close-min" aria-hidden="true"></span>
            </button>
        </div>
        <div class="modal-body" id="panel_input">
            <div class="row">
                <div id="grid4" data-grid-id="CONTROL_BOARD_OPTIOLN_HIS"></div>
            </div>
            <div class="row">
                <div id="grid5" data-grid-id="CONTROL_BOARD_OPTIOLN_HIS2"></div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-close btn-popup-close">닫기</button>
        </div>
    </div>
</div>
<!-- /e:modal-->