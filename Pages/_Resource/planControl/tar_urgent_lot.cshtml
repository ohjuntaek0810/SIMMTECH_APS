@page
@model HS.Web.Pages.tar_urgent_lot
@{
    string CLIENT = Model.Params["CLIENT"].AsString();
    string R = Model.Params["R"].AsString();
    string W = Model.Params["W"].AsString();
}


<script>

    //addDaysToDate(14)  오늘날짜+day 알아오기
    function addDaysToDate(days) {
      const today = new Date();
      const resultDate = new Date(today);
      const safeDays = Number(days);
      resultDate.setDate(today.getDate() + safeDays);
      const formatted = resultDate.getFullYear() + '-' +
        String(resultDate.getMonth() + 1).padStart(2, '0') + '-' +
        String(resultDate.getDate()).padStart(2, '0');
      return formatted;
    }


    // 헤더컬럼 초기값 정의

      const defaultColumns = [
          { dataField: "USE_YN", label: "사용/해제", width: 70, editable: false, align: "center", visible: true },
          { dataField: "URGENCY_LEVEL", label: "URGENT LEVEL_CD", width: 100, editable: true, align: "center" ,},
          { dataField: "URGENT_LEVEL_NAME", label: "URGENT_LEVEL", width: 120, editable: true, align: "center" },
          { dataField: "EXPIRY_DATE", label: "해제일자",  type: "date", width: 100, editable: false, align: "center" },
          { dataField: "DIVISION_ID", label: "GROUP", width: 120, editable: false, align: "center" },
          { dataField: "CUSTOMER_NAME", label: "CUSTOMER", width: 120, editable: false, align: "center" },
          { dataField: "MODEL_NAME", label: "MODEL", width: 200, editable: false, align: "center" },
          { dataField: "ITEM_CODE", label: "ITEM CODE", width: 120, editable: false, align: "center" },
          { dataField: "LOT_NO", label: "LOT_NO", width: 150, editable: false, align: "center" },
          { dataField: "DEPARTMENT_NAME", label: "DEPARTMENT_NAME", width: 150, editable: false, align: "left" },
          { dataField: "STEP", label: "STEP", width: 70, editable: false, align: "center" },
          { dataField: "SCH_DATE", label: "SCH_DATE", type: "date", width: 120, editable: false,   align: "center" },
          { dataField: "COMP_DATE", label: "COMP_DATE",  type: "date", width: 120, editable: false,   align: "center" },
          { dataField: "PRODUCT_WPNL", label: "WPNL", width: 70, editable: false, align: "right" },
          { dataField: "PRODUCT_PCS", label: "PCS", width: 70, editable: false, align: "right" },
          { dataField: "PRODUCT_M2", label: "M2", width: 70, editable: false, align: "right" },
        
          { dataField: "DESCRIPTION", label: "MESSAGE", width: 250, editable: true, align: "center" },
          { dataField: "INSERT_ID", label: "INSERT_ID", width: 130, editable: false, align: "center", visible: true},
          { dataField: "INSERT_DTTM", label: "INSERT_DTTM", width: 200, editable: false, align: "center" ,visible: true},
          { dataField: "ORGANIZATION_ID", label: "ORGANIZATION_ID", width: 1, editable: false, align: "left" },
          { dataField: "JOB_ID", label: "JOB_ID", width: 1, editable: false, align: "left" },
          { dataField: "JOB_NAME", label: "JOB_NAME", width: 1, editable: false, align: "left" },
          { dataField: "URGENCY_LEVEL", label: "URGENCY_LEVEL", width: 1, editable: false, align: "left" },
          { dataField: "REVISION", label: "REVISION", width: 1, editable: false, align: "left" },
          { dataField: "DIVISION_ID", label: "DIVISION_ID", width: 1, editable: false, align: "left" },       
              

      ];


    $hs.handler = {

        "btn_reset" : {
            click: function() {
                // 값 초기화
                $hs.$("pnlSearch").reset();
            }
        },
        "btnSearch": {
            click: function () {

                let toServer = {};
                toServer["terms"] = $hs.$("pnlSearch").val();
                // TODO : Like 조회조건으로 추가하려면 이런식으로 넣어야할지..?
               // console.log($('#dept_class_name').val());
               // console.log(toServer["terms"]);
                $hs.fetch({
                    command: "search",
                    param: toServer
                }).then(fromServer => {

                    $hs.$("grid").data(fromServer["data"]);
                    $('#total_cnt').text('(Total Count:' + fromServer["data"].length + ')');
                }).catch(e => $hs.errorBox(e))
            }
        },
        "btn_grid_save": {
            click: function () {

                let rowsAllData = $hs.$("grid").data();
                let updated_data = [];
                for (var D of rowsAllData) {
                    if(D["$update"] == true)
                    { 
                        updated_data.push(D);
                    }
                }
              
                let toServer = {};
                toServer["Searchterms"] = $hs.$("pnlSearch").val();
                toServer["data"] = updated_data;

                if(toServer["data"].length == 0) {
                    alert("변경된 데이터가 없습니다.");
                    return false;
                }

                $hs.fetch({
                    command: "save",
                    param: toServer
                }).then(fromServer => {
                    alert("저장되었습니다.");

                    $hs.$("grid").data(fromServer["TermsResult"]);
                    $('#total_cnt').text('(Total Count:' + fromServer["TermsResult"].length + ')');

                }).catch(e => $hs.errorBox(e))
                             
            },
        },
        "btn_grid_delete": {
            click: function () {

                let selData = $hs.$("grid").val();

                 if (selData.length == 0) {
                     alert("삭제할 항목을 체크해 주세요.");
                     return;
                 }

                 if(confirm("선택한 항목을 삭제 하시겠습니까?")){
                    let toServer = {};
                    toServer["data"] = selData;
                    $hs.fetch({
                        command: "delete",
                        param: toServer
                    }).then(fromServer => {
                        // 다시 조회
                        $hs.handler["btnSearch"].click();
                    }).catch(e => $hs.errorBox(e))

                }

            },
        },

        "btn_excel_download": {
            click : function() {
                $hs.util.$CommonUtil.excelDownload("grid", "긴급LOT지정");
            }
        },
        "btn_grid_setting" : {  // dimension 세팅
            click : function() {
                // 그리드 세팅 modal open
                // param : modal_id, grid_id, dimension_grid_id
                $hs.util.$CommonUtil.openGridSettingModal("modalDialog", "grid", "dimension_grid");
            }
        },
        "btnSave_dimension" : { // dimension 변경내용 저장
            click : function() {
                $hs.util.$CommonUtil.saveGridSetting("modalDialog", "grid", "dimension_grid", defaultColumns);
            }
        },
        "grid" : {
            contextHeaderClick: function (data) {
                $hs.util.$CommonUtil.getHeaderContextClick(data);
            },
            headerFormat: function (data) {
                if (data.dataField == "URGENT_LEVEL_NAME" || data.dataField == "EXPIRY_DATE" || data.dataField == "DESCRIPTION") {
                    data.cell.css("color", "blue");
                }
            }
        },       
        "btnLotSave1" : { //긴급등록
            click : function(data) {

                let addday = $hs.$("PERIOD").val();
                let MESSAGE = $hs.$("MESSAGE").val();
                let EXPIRY_DATE = addDaysToDate(addday);
               
                let rowsAllData = $hs.$("grid").data();

                let selrowsData = $hs.$("grid").val(); //체크박스에 체크된 행
                let selectedKeys = [];
                // 선택된 행이 여러 개인 경우 (Array인지 확인)
                if (Array.isArray(selrowsData)) {
                  // 각 행의 "_key" 값을 추출하여 selectedKeys 배열에 저장
                  selrowsData.forEach(function(row) {
                    selectedKeys.push(row["_key"]);
                  });
                } else {
                  // 선택된 행이 하나뿐이라면, 해당 "_key" 값을 배열에 넣기
                  selectedKeys.push(selrowsData["_key"]);
                }
                 //selectedKeys 의  _key와 rowsAllData 의 _key 동일한 키만 업데이트 한다

                    rowsAllData.forEach(D => {
                      if (selectedKeys.includes(D["_key"])) {
                        // 원하는 업데이트 로직 작성
                        D["DESCRIPTION"] = MESSAGE;
                        D["EXPIRY_DATE"] = EXPIRY_DATE;                        
                        D["URGENCY_LEVEL"] = "2";
                        D["URGENT_LEVEL_NAME"] = "긴급";
                        D["USE_YN"] = "Y";                        
                        D["$update"] = true;
                      }
                    });
                        //체크박스 초기화
                        // rowsAllData2 = rowsAllData2.map(m => {
                        // delete m["$rowChecked"];
                        // return m;
                        // });

                 $hs.$("grid").data(rowsAllData);

            }
        }
        ,
        "btnLotSave2" : { //초긴급등록
            click : function(data) {
                let addday = $hs.$("PERIOD").val();
                let MESSAGE = $hs.$("MESSAGE").val();
                let EXPIRY_DATE = addDaysToDate(addday);
                let rowsAllData = $hs.$("grid").data();

                let selrowsData = $hs.$("grid").val(); //체크박스에 체크된 행

                let selectedKeys = [];
                // 선택된 행이 여러 개인 경우 (Array인지 확인)
                if (Array.isArray(selrowsData)) {
                  // 각 행의 "_key" 값을 추출하여 selectedKeys 배열에 저장
                  selrowsData.forEach(function(row) {
                    selectedKeys.push(row["_key"]);
                  });
                } else {
                  // 선택된 행이 하나뿐이라면, 해당 "_key" 값을 배열에 넣기
                  selectedKeys.push(selrowsData["_key"]);
                }
                    rowsAllData.forEach(D => {
                      if (selectedKeys.includes(D["_key"])) {
                        // 원하는 업데이트 로직 작성
                        D["DESCRIPTION"] = MESSAGE;
                        D["EXPIRY_DATE"] = EXPIRY_DATE;
                        D["URGENCY_LEVEL"] = "1";
                        D["URGENT_LEVEL_NAME"] = "초긴급";
                        D["USE_YN"] = "Y";
                        D["$update"] = true;
                      }
                    });
                        //체크박스 초기화
                        // rowsAllData2 = rowsAllData2.map(m => {
                        // delete m["$rowChecked"];
                        // return m;
                        // });

                 $hs.$("grid").data(rowsAllData);

            }
        }
        ,
        "btnLot_ExpirySave" : { //해제
            click : function(data) {

                let selrowsData = $hs.$("grid").val(); //체크박스에 체크된 행

                let toServer = {};
                toServer["Searchterms"] = $hs.$("pnlSearch").val();
                toServer["data"] = selrowsData;

                if(toServer["data"].length == 0) {
                    alert("데이터가 없습니다.");
                    return false;
                }

                $hs.fetch({
                    command: "expirysave",
                    param: toServer
                }).then(fromServer => {
                    alert("해제 되었습니다.");

                    $hs.$("grid").data(fromServer["TermsResult"]);
                    $('#total_cnt').text('(Total Count:' + fromServer["TermsResult"].length + ')');

                }).catch(e => $hs.errorBox(e))

            }
        }


        


    }

    $hs.load(() => {
        // 현재 localStorage에 저장된 메뉴 ID 가져옴
        var curMenuId = localStorage.getItem("curMenuId");
        // 즐겨찾기 여부 체크 후 버튼 리스너 추가
        $hs.util.$CommonUtil.checkFavorite(curMenuId);

        // search
        $hs.ui.button.init({ id: "btnSearch", class: ["smart-btn", "btn-search"] });

        // grid save
        $hs.ui.button.init({ id: "btn_grid_save", enabled: @W });       
        $hs.ui.button.init({ id: "btnLotSave2", enabled: @W });
        $hs.ui.button.init({ id: "btnLotSave1", enabled: @W });
        $hs.ui.button.init({ id: "btnLot_ExpirySave", enabled: @W });
        $hs.ui.button.init({ id: "btn_grid_delete", enabled: @W });

        
        
        
        

        $hs.ui.button.init({ id: "btn_excel_download"});

        // panel
        $hs.html.panel.init({ id: "pnlSearch" });

        // grid setting
        $hs.ui.button.init({ id: "btn_grid_setting"});
        $hs.ui.button.init({ id: "btnSave_dimension"});

        // text Box open
      
    

       // $hs.ui.button.init({ id: "btn_aps_wip_route_group_name_open" });
       // $hs.ui.button.init({ id: "btn_aps_dept_group_name_open" });
       // $hs.ui.button.init({ id: "btn_resource_capa_group_name_open" });

        // grid
        $hs.dx.grid.init({
            id: "grid",
            width: "100%",
            height: "100%",
            sortable: true,
            selectMode: "multiple",
            rownumber: false,
            filterable: true,
            editable: true,
            handler: true,
            reOrdering: true, // 컬럼 재배치 여부
            headerContextmenu : ["Sort Asc", "Sort Desc", "Sort Clear", "Fixed", "Unfixed", "Hide", "Hide Clear",
                {
                    menu : "CAL",
                    child : [
                        "Count",
                        "Avg",
                        "Max",
                        "Min",
                        "Sum",
                        "Std. Div"
                    ]
                }
            ],
        })


        // 그리드 컬럼가져오기
        // 1. id로 사용할 grid_id(js용)
        // 2. 초기화용 컬럼들 (LIST)
        // <div id="grid" data-grid-id="RESOURCE_GRID"></div>
        $hs.util.$CommonUtil.getGridSetting("grid", defaultColumns);

        const _instance = $hs.$("grid")._instance;
        // 컬럼 라인 그리기
        _instance.option('showColumnLines', true);
        _instance.option('rowAlternationEnabled', false);
        _instance.option('showBorders', true);
        _instance.option('scrolling', {
            showScrollbar: 'always',
            useNative: true
        });

        // demension grid
        $hs.dx.grid.init({
            id: "dimension_grid",
            width: "100%",
            height: "300px",
            sortable: true,
            selectMode: "single",
            dragRow: true,
            rownumber: false,
            filterable: false,
            editable: true,
            handler: true,
        }).columns(col => {
            col.add({ dataField: "dataField", label: "dataField", width: 200, editable: false, visible:false })
            col.add({ dataField: "editable", label: "editable", width: 200, editable: false, visible:false })
            col.add({ dataField: "name", label: "NAME", width: 200, editable: false })
            col.add({ dataField: "visible", label: "VISIBLE", width: 80, editable: true, type: "boolean" })
            col.add({ dataField: "width", label: "WIDTH", width: 80, editable: true })
            col.add({ dataField: "fix", label: "FIX", width: 80, editable: true, type: "boolean" })
        });




        // 사업부
        $hs.html.select.init({
            id: "group_id",
            dataurl: "/api/data/DIVISION_LIST",
            valueMember: "CODE",
            displayMember: "NAME",
            val: ""
        });

        // SITE
        $hs.html.select.init({
            id: "SITE",
            dataurl: "/api/data/SITE",
            valueMember: "CODE",
            displayMember: "NAME",
            val: ""
        });

        $hs.html.select.init({ id: "use_yn", data: [{label : "ALL", value: ""}, { label : "사용", value: "Y" }, { label : "해제", value: "N" }], val: "" });

        $hs.html.select.init({ id: "URGENCY_LEVEL", data: [{ label : "ALL", value: "" }, { label : "긴급", value: "2" }, { label : "초긴급", value: "1" }], val: "" });

        
        // 팝업
        $hs.html.$popup.init('modalDialog');

        $hs.html.input.initAll();
    });

</script>

<script>
    window.onload = function() {
        //페이지 로드시 오늘 일자 지난것은 해제 처리
        $hs.fetch({
            command: "init_ExpirySave",
            param: null
        }).then(fromServer => {            
        }).catch(e => $hs.errorBox(e))
    };
</script>




<!-- s:Content Header (Page header) -->
<div class="content-header">
    <div class="header-location">
        <div class="header-title">
            <span class="sub-title">긴급 LOT 지정</span>
            <div class="toggle-container-favorites">
                <input type="checkbox" id="favorites-toggle" hidden>
                <label for="favorites-toggle" class="favorites-toggle">
                    <i class="bx bx-star"></i>
                </label>
            </div>
        </div>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#link"><i class="xi-ico xi-home"></i></a></li>
            <li class="breadcrumb-item active">Plan Control</li>
            <li class="breadcrumb-item active">긴급 LOT 지정</li>
        </ol>
    </div>
    <div class="header-setting">
        <div class="header-btn">
            <div class="filter-toggle-container">
                <span class="toggle-title">Search Area</span>
                <input type="checkbox" id="favorites-toggle-switch" hidden checked>
                <label for="favorites-toggle-switch" class="switch"></label>
            </div>
        </div>
    </div>
</div>
<!-- /e:Content Header -->
<hr>
<!-- s:content -->
<section class="content-body" flex>
    <div class="content row" flex>
        <div class="col-lg-12" flex>
            <div class="content-box content-filter">
                <div class="box-body">
                    <div class="list-filter">
                        <div id="pnlSearch" class="filter-content form-inline">

                            
                            <div class="form-group">
                                <div class="control-label"><label>긴급구분</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="URGENCY_LEVEL" hs-df="URGENCY_LEVEL" hs-handler="true"></select>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>GROUP</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="group_id" hs-df="group_id" hs-handler="true"></select>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="control-label"><label>CUSTOMER</label></div>
                                <div class="control-form">
                                    <input type="text" id="customer" class="form-control" placeholder="Search" hs-df="customer">
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="control-label"><label>ITEM CODE</label></div>
                                <div class="control-form">
                                    <input type="text" id="item_code" class="form-control" placeholder="Search" hs-df="item_code" >
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="control-label"><label>LOT NO</label></div>
                                <div class="control-form">
                                    <input type="text" id="LOTNO" class="form-control" placeholder="Search" hs-df="LOTNO">
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="control-label"><label>사용/해제</label></div>
                                <div class="control-form">
                                    <select class="form-control" id="use_yn" hs-df="use_yn"    ></select>
                                </div>
                            </div>

                            <button id="btn_reset" type="button" class="btn btn-reset-icon" hs-btn><span class="blind">filter reset</span></button>
                            <button id="btnSearch" type="button" class="btn btn-search-icon" hs-btn>Search<span class="blind">filter search</span></button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="content-box">
                <div class="box-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="control-label"><label>MESSAGE</label></div>
                            <input type="text" id="MESSAGE" class="form-control" placeholder="MESSAGE" hs-df="MESSAGE">
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="control-label"><label>URGENT PERIOD</label></div>
                                <!--<input type="number" id="PERIOD" hs-df="PERIOD" class="form-datepicker form-control" data-toggle="datepicker" placeholder="PERIOD">
                                <!--<input type="text" id="PERIOD" hs-df="PERIOD" class="form-datepicker form-control" data-toggle="datepicker" placeholder="PERIOD">-->
                                <div class="d-flex align-items-center">
                                    <input type="number"
                                           id="PERIOD"
                                           hs-df="PERIOD"
                                           class="form-control"
                                           placeholder="PERIOD"
                                           min="1"
                                           max="14"
                                           step="1"
                                           value="14"
                                           style="width:150px; margin-right:8px;">
                                    <button id="btnLot_ExpirySave" type="button" class="btn btn-cancel ml-3" hs-btn>해제<span class="blind">filter reset</span></button>
                                    <button id="btnLotSave1" type="button" class="btn btn-add ml-3" hs-btn>긴급등록<span class="blind">filter Save</span></button>
                                    <button id="btnLotSave2" type="button" class="btn btn-add ml-3" hs-btn>초긴급등록<span class="blind">filter Save</span></button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>



            <div class="content-box" flex>
                <!-- 헤더부분 정의-->
                <div class="box-header">
                    <div class="header-title">공정 정보<span class="title-list-count"><small id="total_cnt"></small></span></div>
                    <div class="header-btn">
                        <button id="btn_grid_save" type="button" class="btn btn-save">save</button>
                        <button id="btn_grid_delete" type="button" class="btn btn-delete" hs-btn>delete</button>
                        <button id="btn_excel_download" type="button" class="btn btn-download">excel</button>
                        <button id="btn_grid_setting" type="button" class="btn btn-setting-icon"><span class="blind">setting</span></button>
                    </div>
                </div>
                <!-- 바디부분 정의-->
                <div class="box-body" flex>
                    <div class="grid-container" flex>
                        <div id="grid" data-grid-id="TAR_URGENT_LOT"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- /e:content -->
<!-- s:modal -->
<div id="modalDialog" style="display:none; position:absolute; height:400px;width:600px;">
    <div class="modal-content animate-top">
        <div id="modal-header" class="modal-header">
            <h5 class="modal-title">PERSONALIZATION</h5>
            <button type="button" class="btn-popup-close">
                <span class="xi-close-min" aria-hidden="true"></span>
            </button>
        </div>
        <div class="modal-body" id="panel_input">
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label"><label>Dimension</label></div>
                    </div>
                </div>
            </div>
            <div class="grid-container" flex>
                <div id="dimension_grid"></div>
            </div>
        </div>
        <div class="modal-footer">
            <button id="btnSave_dimension" type="button" class="btn btn-save">저장</button>
            <button type="button" class="btn btn-close btn-popup-close">닫기</button>
        </div>
    </div>
</div>
<!-- /e:modal -->